{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started with MetaTrader 5 in Go","text":"<p>Welcome to the MetaRPC MT5 Go Documentation \u2014 your guide to building integrations with MetaTrader 5 using Go and gRPC.</p> <p>This documentation will help you:</p> <ul> <li>\ud83d\udcd8 Explore all available account, trading, and market methods</li> <li>\ud83d\udca1 Learn from Go usage examples with context and timeout control</li> <li>\ud83d\udd01 Work with real-time streaming of quotes, orders, positions, and deals</li> <li>\u2699\ufe0f Understand all input/output types, such as <code>OrderSendData</code>, <code>PositionData</code>, <code>QuoteData</code>, and enums like <code>ENUM_ORDER_TYPE_TF</code> or <code>MRPC_ENUM_TRADE_REQUEST_ACTIONS</code></li> <li>\ud83d\udfe2 A link to a convenient way to view information https://metarpc.github.io/GoMT5/</li> </ul>"},{"location":"#main-sections","title":"\ud83d\udcda Main Sections","text":""},{"location":"#quick-account-market-info","title":"Quick Account &amp; Market Info","text":"<ul> <li>Account Summary</li> <li>Quote</li> <li>QuotesMany</li> <li>Symbol Params</li> <li>Tick Values</li> <li>All Symbols</li> </ul>"},{"location":"#opened-state-snapshot","title":"Opened State Snapshot","text":"<ul> <li>Opened Orders</li> <li>Opened Order Tickets</li> <li>Show Positions</li> <li>Has Open Position</li> </ul>"},{"location":"#calculations-safety-checks","title":"Calculations &amp; Safety Checks","text":"<ul> <li>Order Calc Margin</li> <li>Order Calc Profit</li> <li>Order Check</li> </ul>"},{"location":"#trading-operations","title":"Trading Operations \u26a0\ufe0f","text":"<ul> <li>Section index: TradingOps (DANGEROUS)</li> <li> <p>Popular entries:</p> </li> <li> <p>Buy Market</p> </li> <li>Sell Market</li> <li>Place Buy Limit</li> <li>Place Sell Limit</li> <li>Place Buy Stop</li> <li>Place Sell Stop</li> <li>Place Stop Limit</li> <li>Order Send Example</li> <li>Order Send StopLimit Example</li> <li>Order Modify Example</li> <li>Order Close Example</li> <li>Order Delete Example</li> <li>Position Modify</li> <li>Position Close</li> <li>Close All Positions</li> <li>Set Order Expiration</li> </ul>"},{"location":"#history-simple-statistics","title":"History &amp; Simple Statistics","text":"<ul> <li>Section overview: History &amp; Stats \u2014 Overview</li> <li>Show Orders History</li> <li>Show Deals Count</li> <li>Order By Ticket</li> <li>Deal By Ticket</li> <li>(Time range guide is linked inside the Overview)</li> </ul>"},{"location":"#streaming","title":"Streaming","text":"<ul> <li>Streaming Quotes</li> <li>Stream Opened Order Profits</li> <li>Stream Opened Order Tickets</li> <li>Stream Trade Updates</li> </ul>"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":"<ol> <li>Configure your <code>config.json</code> with MT5 credentials and connection details.</li> <li>Initialize an <code>MT5Account</code>, wrap it in <code>MT5Service</code>.</li> <li>Run examples from <code>main.go</code> or call the <code>Show*</code> helpers.</li> </ol> <pre><code>ctx := context.Background()\nsvc := mt5.NewMT5Service(account)\n\n// Example: quick account &amp; quote\nsvc.ShowAccountSummary(ctx)\nsvc.ShowQuote(ctx, \"EURUSD\")\n</code></pre>"},{"location":"#requirements","title":"\ud83d\udee0 Requirements","text":"<ul> <li>Go 1.21+</li> <li>gRPC-Go</li> <li>Protobuf Go bindings (fetched from remote repo via <code>go.mod</code>)</li> <li>VS Code / GoLand / LiteIDE</li> </ul>"},{"location":"#navigation-tips","title":"\ud83e\udded Navigation Tips","text":"<ul> <li>Sections above link directly to the markdown files in your repo.</li> <li>The TradingOps path uses encoded parentheses: <code>TradingOps%28DANGEROUS%29</code>.</li> <li>History methods rely on <code>from/to</code> ranges \u2014 see the Overview inside that section.</li> </ul>"},{"location":"Beginner_Run_Guide/","title":"\ud83d\udea6 Beginner Run Guide for GoMT5","text":"<p>This guide is designed for beginners who already have their <code>config.json</code> set up with login, password, server, and default symbol. It explains what to uncomment in <code>examples/main.go</code> and what happens when you run the code.</p>"},{"location":"Beginner_Run_Guide/#how-to-run","title":"\u26a1 How to Run","text":"<p>Open your terminal in the project root:</p> <pre><code>cd examples\ngo run .\n</code></pre> <p>This will use your <code>examples/main.go</code> file as the entry point.</p>"},{"location":"Beginner_Run_Guide/#safe-first-steps","title":"\ud83e\uddea Safe First Steps","text":"<p>These operations do not change anything on your account. They are safe to test.</p> <p>In <code>examples/main.go</code>, uncomment one or more of the following:</p> <pre><code>// Show account summary\nsvc.ShowAccountSummary(ctx)\n\n// Show all available symbols\nsvc.ShowAllSymbols(ctx)\n\n// Get live quote for EURUSD\nsvc.ShowQuote(ctx, \"EURUSD\")\n\n// Stream continuous quotes\nsvc.StreamQuotes(ctx)\n</code></pre> <p>Run the app again and watch the output.</p>"},{"location":"Beginner_Run_Guide/#getting-data","title":"\ud83d\udcca Getting Data","text":"<p>Useful methods to retrieve account or market information:</p> <pre><code>// Print history of trades (last 7 days by default)\nsvc.ShowOrdersHistory(ctx)\n\n// Print currently open orders\nsvc.ShowOpenedOrders(ctx)\n\n// Show full symbol parameters (like contract size, digits, etc.)\nsvc.ShowSymbolParams(ctx, \"EURUSD\")\n</code></pre>"},{"location":"Beginner_Run_Guide/#trading-operations-be-careful","title":"\u26a0\ufe0f Trading Operations (Be Careful)","text":"<p>These will actually place, modify, or close orders (even on demo). Always test on a demo account first.</p> <pre><code>// Open a sample Buy order\nsvc.ShowOrderSendExample(ctx, \"EURUSD\")\n\n// Modify order SL/TP (requires a real ticket)\nsvc.ShowOrderModifyExample(ctx, 123456789)\n\n// Close order by ticket\nsvc.ShowOrderCloseExample(ctx, 123456789)\n</code></pre>"},{"location":"Beginner_Run_Guide/#combo-scenarios","title":"\ud83c\udfac Combo Scenarios","text":""},{"location":"Beginner_Run_Guide/#1-open-check-close","title":"1. Open \u2192 Check \u2192 Close","text":"<pre><code>// Step 1: Open Buy Market order\nsvc.ShowOrderSendExample(ctx, \"EURUSD\")\n\n// Step 2: List opened orders\nsvc.ShowOpenedOrders(ctx)\n\n// Step 3: Close by ticket (replace with real ticket number from output)\nsvc.ShowOrderCloseExample(ctx, 123456789)\n</code></pre>"},{"location":"Beginner_Run_Guide/#2-place-pending-wait-delete","title":"2. Place Pending \u2192 Wait \u2192 Delete","text":"<pre><code>// Step 1: Place pending order (Buy Limit)\nsvc.ShowOrderSendExample(ctx, \"EURUSD\") // adjust inside method to pending type if needed\n\n// Step 2: Check active pending orders\nsvc.ShowOpenedOrders(ctx)\n\n// Step 3: Delete the pending order by ticket\nsvc.ShowOrderDeleteExample(ctx, 123456789)\n</code></pre>"},{"location":"Beginner_Run_Guide/#3-market-data-dashboard","title":"3. Market Data Dashboard","text":"<pre><code>// Show account summary\nsvc.ShowAccountSummary(ctx)\n\n// Stream real-time quotes\nsvc.StreamQuotes(ctx)\n\n// Print live profits of open orders\nsvc.StreamOpenedOrderProfits(ctx)\n</code></pre>"},{"location":"Beginner_Run_Guide/#tips-for-beginners","title":"\ud83e\udde0 Tips for Beginners","text":"<ul> <li>Always start with safe methods before trying trading functions.</li> <li>Replace <code>123456789</code> with the real order ticket number you see in the output.</li> <li>Keep <code>config.json</code> secure \u2014 it contains your login details.</li> <li>Use demo accounts until you are fully confident.</li> </ul> <p>This way, even a beginner can follow step by step, uncomment the right methods, and see immediate results without being lost.</p>"},{"location":"Beginner_Run_Guide/#combo-scenario-a-place-buy-limit-monitor-delete-real","title":"\ud83d\udd17 Combo Scenario A \u2014 Place Buy Limit \u2192 monitor \u2192 delete (real!)","text":"<p>Goal: create a pending order with expiration, watch it in streams for \\~30s, then delete it by ticket.</p> <pre><code>// 1) Place Buy Limit (auto-cancel in 24h)\nexp := timestamppb.New(time.Now().Add(24 * time.Hour))\nsvc.PlaceBuyLimit(ctx, selectedSymbol, 0.10, 1.07500, nil, nil, exp)\n\n// 2) Watch tickets/profits for ~30s (internally stop by timeout)\nsvc.StreamOpenedOrderTickets(ctx)\nsvc.StreamOpenedOrderProfits(ctx)\n\n// 3) Get the order ticket from console output (or from your terminal log)\n//    Then delete it:\n// svc.ShowOrderDeleteExample(ctx, YOUR_ORDER_TICKET)\n</code></pre> <p>Tip: To make finding the ticket easier, use a unique comment when placing orders (see trading helpers with <code>comment</code>).</p>"},{"location":"Beginner_Run_Guide/#combo-scenario-b-market-buy-show-position-modify-sltp-close-real","title":"\ud83d\udd17 Combo Scenario B \u2014 Market Buy \u2192 show position \u2192 modify SL/TP \u2192 close (real!)","text":"<p>Goal: open a position at market, ensure it exists, optionally adjust, then close.</p> <pre><code>// 1) Execute market BUY (\u26a0\ufe0f real trade)\n// svc.BuyMarket(ctx, selectedSymbol, 0.10, nil, nil)\n\n// 2) Confirm in console\nsvc.ShowPositions(ctx)            // should show an open position for selectedSymbol\nsvc.ShowHasOpenPosition(ctx, selectedSymbol)\n\n// 3) Modify position SL/TP (needs position ticket) \u2014 optional\n//    If you know the ticket, call:\n// svc.ShowPositionModify(ctx, /*ticket=*/ 123456789, /*newSL=*/ nil, /*newTP=*/ nil)\n//    (Without a helper that returns the ticket programmatically, take it from ShowPositions output.)\n\n// 4) Close the position by symbol\n// svc.ShowPositionClose(ctx, selectedSymbol)\n</code></pre> <p>Note: If you prefer closing the order itself, use <code>ShowOrderCloseExample(ctx, ticket)</code> with the exact order ticket.</p>"},{"location":"Beginner_Run_Guide/#combo-scenario-c-intraday-pending-workflow-place-auto-expire","title":"\ud83d\udd17 Combo Scenario C \u2014 Intraday pending workflow (place \u2192 auto-expire)","text":"<p>Goal: create orders that auto-cancel by end of day if not filled.</p> <pre><code>// Expire at local midnight\nendOfDay := time.Date(time.Now().Year(), time.Now().Month(), time.Now().Day(), 23, 59, 0, 0, time.Local)\nexp := timestamppb.New(endOfDay)\n\n// Two brackets: BUY_STOP above market and SELL_STOP below\nsvc.PlaceBuyStop(ctx,  selectedSymbol, 0.10, /*trigger=*/ 1.09200, nil, nil, exp)\nsvc.PlaceSellStop(ctx, selectedSymbol, 0.10, /*trigger=*/ 1.07800, nil, nil, exp)\n\n// Optional: watch for ~30s\nsvc.StreamTradeUpdates(ctx)\n</code></pre> <p>Cleanup: If needed, delete by ticket later via <code>ShowOrderDeleteExample</code>.</p>"},{"location":"Beginner_Run_Guide/#combo-scenario-d-quick-read-only-dashboard-safe","title":"\ud83d\udd17 Combo Scenario D \u2014 Quick read-only dashboard (safe)","text":"<p>Goal: one-shot snapshot for monitoring.</p> <pre><code>svc.ShowAccountSummary(ctx)\nsvc.ShowQuote(ctx, selectedSymbol)\nsvc.ShowOpenedOrders(ctx)\nsvc.ShowPositions(ctx)\nfrom := time.Now().AddDate(0, 0, -7); to := time.Now()\nsvc.ShowDealsCount(ctx, from, to, \"\")\n</code></pre>"},{"location":"Beginner_Run_Guide/#copypaste-starters","title":"\ud83e\uddf7 Copy\u2011Paste Starters","text":"<ul> <li>Need expiration doc? See SetOrderExpiration.md in <code>docs/TradingOps(DANGEROUS)/</code>.</li> <li>Need time range patterns? See History_Range(important).md in <code>docs/History_And_SimpleStatistics/</code>.</li> </ul> <p>These combos keep changes minimal and mirror the helpers you already have, so a newcomer can un\u2011comment a block, run it, and understand the flow step by step. \u2705</p>"},{"location":"Using_GoMT5/","title":"\ud83e\uddf0 Using GoMT5 via CLI (No GUI)","text":"<p>This guide shows how to run GoMT5 straight from the terminal \u2014 no GUI, only code and the console. Perfect for devs, ops, and anyone who prefers scripts over buttons.</p>"},{"location":"Using_GoMT5/#requirements","title":"\ud83d\udd27 Requirements","text":"Tool / Thing Purpose Go 1.21+ Build &amp; run the project MetaTrader 5 Terminal with MetaRPC plugin / connector running <code>config.json</code> Login credentials, server name, default symbol Terminal (cmd/PS/Bash) All operations are executed from the command line <p>Proto note: <code>.proto</code> files are not stored locally \u2014 Go bindings are pulled from the remote repo via <code>go.mod</code>.</p>"},{"location":"Using_GoMT5/#project-structure-current","title":"\ud83d\udcc1 Project Structure (current)","text":"<pre><code>GoMT5/\n\u251c\u2500 docs/                                 # Documentation (what you're reading)\n\u251c\u2500 examples/                             # Full runnable example (single module)\n\u2502  \u251c\u2500 config/\n\u2502  \u2502  \u251c\u2500 config.go                        # Loads config.json\n\u2502  \u2502  \u2514\u2500 config.json                      # Login/Server/DefaultSymbol\n\u2502  \u251c\u2500 mt5/\n\u2502  \u2502  \u251c\u2500 MT5Account.go                    # Low-level account &amp; connection helpers\n\u2502  \u2502  \u2514\u2500 MT5Service.go                    # High-level helpers (Show*/Place*/Buy/Sell)\n\u2502  \u251c\u2500 go.mod                              # Module for the examples project\n\u2502  \u251c\u2500 go.sum\n\u2502  \u2514\u2500 main.go                             # Entry point for running examples\n\u251c\u2500 go.work / go.work.sum                  # Workspace files\n\u251c\u2500 mkdocs.yml                             # Docs site config (optional)\n\u2514\u2500 .gitignore\n</code></pre>"},{"location":"Using_GoMT5/#example-configjson","title":"\ud83e\udde9 Example <code>config.json</code>","text":"<pre><code>{\n  \"Login\": 501401178,\n  \"Password\": \"v8gctta\",\n  \"Server\": \"RoboForex-Demo\",\n  \"DefaultSymbol\": \"EURUSD\"\n}\n</code></pre> <p>You can also set a proxy via env var:</p> <ul> <li><code>MT5_PROXY=http://host:port</code></li> <li><code>MT5_PROXY=socks5://user:pass@host:port</code></li> </ul>"},{"location":"Using_GoMT5/#run-it","title":"\ud83d\ude80 Run It","text":"<p>From the examples/ folder (it contains its own <code>go.mod</code> and <code>main.go</code>):</p> <pre><code>cd examples\n# Windows PowerShell / cmd / Bash \u2014 all the same\n\ngo run .\n</code></pre> <p>If all is well, you\u2019ll see logs like:</p> <pre><code>using proxy: ... (or \"no proxy set\")\nconnect(wait on server ...) to RoboForex-...\nterminal is ready\nsymbol ready: EURUSD\n\u2705 Done.\n</code></pre> <p>Typical fix if you get <code>no Go files</code> \u2014 you\u2019re not in <code>examples/</code>. <code>cd examples</code> and re-run <code>go run .</code>.</p>"},{"location":"Using_GoMT5/#what-you-can-call-by-blocks","title":"\ud83e\uddea What You Can Call (by blocks)","text":""},{"location":"Using_GoMT5/#1-quick-account-market-info","title":"1) Quick Account &amp; Market Info","text":"<ul> <li><code>svc.ShowAccountSummary(ctx)</code> \u2014 balance/equity/currency</li> <li><code>svc.ShowQuote(ctx, symbol)</code> \u2014 live bid/ask</li> <li><code>svc.ShowQuotesMany(ctx, []string{\"EURUSD\",\"GBPUSD\"})</code></li> <li><code>svc.ShowSymbolParams(ctx, symbol)</code></li> <li><code>svc.ShowTickValues(ctx, []string{...})</code></li> <li><code>svc.ShowAllSymbols(ctx)</code> (prints a lot)</li> </ul>"},{"location":"Using_GoMT5/#2-opened-state-snapshot","title":"2) Opened State Snapshot","text":"<ul> <li><code>svc.ShowOpenedOrders(ctx)</code></li> <li><code>svc.ShowOpenedOrderTickets(ctx)</code></li> <li><code>svc.ShowPositions(ctx)</code></li> <li><code>svc.ShowHasOpenPosition(ctx, symbol)</code></li> </ul>"},{"location":"Using_GoMT5/#3-calculations-pre-trade-checks-safe","title":"3) Calculations &amp; Pre-Trade Checks (safe)","text":"<ul> <li><code>svc.ShowOrderCalcMargin(ctx, symbol, orderType, volume, openPrice)</code></li> <li><code>svc.ShowOrderCalcProfit(ctx, symbol, orderType, volume, open, close)</code></li> <li><code>svc.ShowOrderCheck(ctx, action, orderType, symbol, volume, price, sl, tp, deviation, magic, exp)</code></li> </ul>"},{"location":"Using_GoMT5/#4-trading-ops-real-actions","title":"4) Trading Ops (\u26a0\ufe0f real actions)","text":"<ul> <li><code>svc.BuyMarket(ctx, symbol, volume, sl, tp)</code></li> <li><code>svc.SellMarket(ctx, symbol, volume, sl, tp)</code></li> <li><code>svc.PlaceBuyLimit(ctx,  symbol, volume, price, sl, tp, exp)</code></li> <li><code>svc.PlaceSellLimit(ctx, symbol, volume, price, sl, tp, exp)</code></li> <li><code>svc.PlaceBuyStop(ctx,   symbol, volume, trigger, sl, tp, exp)</code></li> <li><code>svc.PlaceSellStop(ctx,  symbol, volume, trigger, sl, tp, exp)</code></li> <li><code>svc.PlaceStopLimit(ctx, isBuy,  volume, trigger, limit, sl, tp, exp)</code></li> <li><code>svc.ShowOrderModifyExample(ctx, ticket)</code></li> <li><code>svc.ShowOrderCloseExample(ctx,  ticket)</code></li> <li><code>svc.ShowOrderDeleteExample(ctx, ticket)</code></li> <li><code>svc.ShowPositionModify(ctx, ticket, newSL, newTP)</code></li> <li><code>svc.ShowPositionClose(ctx, symbol)</code></li> <li><code>svc.ShowCloseAllPositions(ctx)</code> (handle with care!)</li> </ul>"},{"location":"Using_GoMT5/#5-history-simple-stats-read-only","title":"5) History &amp; Simple Stats (read-only)","text":"<ul> <li><code>svc.ShowOrdersHistory(ctx, from, to)</code></li> <li><code>svc.ShowDealsCount(ctx, from, to, symbol)</code></li> <li><code>svc.ShowOrderByTicket(ctx, orderTicket)</code></li> <li><code>svc.ShowDealByTicket(ctx, dealTicket)</code></li> </ul> <p>Need help with <code>from/to</code> ranges? See the doc: History_Range(important).</p>"},{"location":"Using_GoMT5/#streaming-subscriptions","title":"\ud83d\udd04 Streaming / Subscriptions","text":"<ul> <li><code>svc.StreamQuotes(ctx)</code> \u2014 live ticks per symbol(s)</li> <li><code>svc.StreamOpenedOrderProfits(ctx)</code> \u2014 real-time P/L per open order</li> <li><code>svc.StreamOpenedOrderTickets(ctx)</code> \u2014 current open tickets</li> <li><code>svc.StreamTradeUpdates(ctx)</code> \u2014 trade events (new/updated orders)</li> </ul> <p>Example output:</p> <pre><code>[Tick] EURUSD | Bid: 1.09876 | Ask: 1.09889 | Time: 2025-07-29 18:00:01\n</code></pre>"},{"location":"Using_GoMT5/#enabling-a-function-in-maingo","title":"\ud83e\uddd1\u200d\ud83d\udcbb Enabling a Function in <code>main.go</code>","text":"<p>Just call the helpers you need:</p> <pre><code>svc.ShowAccountSummary(ctx)\nsvc.ShowQuote(ctx, \"EURUSD\")\n// svc.BuyMarket(ctx, \"EURUSD\", 0.10, nil, nil) // \u26a0\ufe0f real trade \u2014 keep commented until ready\n</code></pre> <p>You can chain them \u2014 e.g., open a pending order and immediately subscribe to updates.</p>"},{"location":"Using_GoMT5/#tips","title":"\ud83e\udde0 Tips","text":"<ul> <li>Prefer <code>context.WithTimeout</code> for network calls.</li> <li>Set <code>MT5_PROXY</code> if you\u2019re behind a corporate firewall.</li> <li>Even on demo \u2014 trades are real for the broker side. Test carefully.</li> <li>Use <code>timestamppb.New(time.Now().Add(...))</code> to set expiration for pending orders (see SetOrderExpiration).</li> </ul>"},{"location":"Using_GoMT5/#quick-example","title":"\ud83d\udcce Quick Example","text":"<pre><code>svc.ShowAccountSummary(ctx)\nsvc.ShowQuote(ctx, \"EURUSD\")\nsvc.ShowOpenedOrders(ctx)\nsvc.StreamQuotes(ctx)\n</code></pre> <p>Minimal. Fast. Scriptable. Exactly what CLI folks love. \ud83e\uddea\u26a1</p>"},{"location":"api/","title":"Api","text":"<p>.</p> <p>Generated by godoc2md</p>"},{"location":"Calculations_And_PreliminaryVerification/OrderCalcMargin/","title":"Calculating Required Margin","text":"<p>Request: compute margin required for a hypothetical trade before sending it.</p>"},{"location":"Calculations_And_PreliminaryVerification/OrderCalcMargin/#code-example","title":"Code Example","text":"<pre><code>// High-level (prints the margin in account currency):\nsvc.ShowOrderCalcMargin(ctx, \"EURUSD\", pb.ENUM_ORDER_TYPE_TF_ORDER_TYPE_TF_BUY, 0.10, 0)\n\n// Low-level (full control):\nreq := &amp;pb.OrderCalcMarginRequest{\n    Symbol:    \"EURUSD\",\n    OrderType: pb.ENUM_ORDER_TYPE_TF_ORDER_TYPE_TF_BUY,\n    Volume:    0.10,     // lots\n    OpenPrice: 0,        // 0 for market; for pending use the intended price\n}\nres, err := svc.account.OrderCalcMargin(ctx, req)\nif err != nil {\n    log.Printf(\"\u274c OrderCalcMargin error: %v\", err)\n    return\n}\nfmt.Printf(\"\ud83e\uddee Margin required: %.2f\\n\", res.GetMargin())\n</code></pre>"},{"location":"Calculations_And_PreliminaryVerification/OrderCalcMargin/#method-signature","title":"Method Signature","text":"<pre><code>func (s *MT5Service) ShowOrderCalcMargin(ctx context.Context, symbol string, orderType pb.ENUM_ORDER_TYPE_TF, volume float64, openPrice float64)\n</code></pre>"},{"location":"Calculations_And_PreliminaryVerification/OrderCalcMargin/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Required Description <code>ctx</code> <code>context.Context</code> yes Controls timeout/cancellation for the RPC. <code>symbol</code> <code>string</code> yes Trading symbol name (e.g., <code>\"EURUSD\"</code>). <code>orderType</code> <code>pb.ENUM_ORDER_TYPE_TF</code> yes Order kind (market/pending) \u2014 see enum below. <code>volume</code> <code>float64</code> yes Trade volume in lots (respect broker <code>VolumeMin/Max/Step</code>). <code>openPrice</code> <code>float64</code> yes Price used for the calc. Use 0 for market; for pendings pass entry px."},{"location":"Calculations_And_PreliminaryVerification/OrderCalcMargin/#enum-enum_order_type_tf","title":"Enum: <code>ENUM_ORDER_TYPE_TF</code>","text":"Code Name Meaning 0 <code>ORDER_TYPE_TF_BUY</code> Market Buy 1 <code>ORDER_TYPE_TF_SELL</code> Market Sell 2 <code>ORDER_TYPE_TF_BUY_LIMIT</code> Pending Buy Limit 3 <code>ORDER_TYPE_TF_SELL_LIMIT</code> Pending Sell Limit 4 <code>ORDER_TYPE_TF_BUY_STOP</code> Pending Buy Stop 5 <code>ORDER_TYPE_TF_SELL_STOP</code> Pending Sell Stop 6 <code>ORDER_TYPE_TF_BUY_STOP_LIMIT</code> Pending Buy Stop-Limit 7 <code>ORDER_TYPE_TF_SELL_STOP_LIMIT</code> Pending Sell Stop-Limit 8 <code>ORDER_TYPE_TF_CLOSE_BY</code> Close by opposite position <p>Enum names/codes are taken from <code>mt5-term-api-trade-functions.pb.go</code> (<code>ENUM_ORDER_TYPE_TF</code>).</p>"},{"location":"Calculations_And_PreliminaryVerification/OrderCalcMargin/#output","title":"\u2b06\ufe0f Output","text":"<p>Returns <code>OrderCalcMarginData</code>.</p> Field Type Description <code>Margin</code> <code>float64</code> Margin required in account currency for the given scenario."},{"location":"Calculations_And_PreliminaryVerification/OrderCalcMargin/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Validate affordability of a trade before <code>OrderSend</code>.</li> <li>Pre-compute margin usage for risk checks and sizing logic.</li> <li>What-if analysis for pending orders at specific prices.</li> </ul>"},{"location":"Calculations_And_PreliminaryVerification/OrderCalcMargin/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>The result may depend on symbol settings (contract size, leverage tiers, margin currency). Pair with <code>SymbolParams</code>.</li> <li>For market scenarios pass <code>openPrice=0</code> \u2014 the server uses current prices.</li> <li>For pending scenarios pass your intended entry price; margin model can differ from market.</li> <li>Margin models can change with volatility or session; treat the result as an estimate, not a guarantee.</li> </ul>"},{"location":"Calculations_And_PreliminaryVerification/OrderCalcProfit/","title":"Calculating Profit for a Hypothetical Trade","text":"<p>Request: compute P/L for a given order type, volume, and price change.</p>"},{"location":"Calculations_And_PreliminaryVerification/OrderCalcProfit/#code-example","title":"Code Example","text":"<pre><code>// High-level (prints computed P/L in account currency):\nsvc.ShowOrderCalcProfit(ctx, \"EURUSD\", pb.ENUM_ORDER_TYPE_TF_ORDER_TYPE_TF_BUY, 0.10, 1.08000, 1.08350)\n\n// Low-level (manual request/response):\nreq := &amp;pb.OrderCalcProfitRequest{\n    OrderType:  pb.ENUM_ORDER_TYPE_TF_ORDER_TYPE_TF_BUY, // BUY/SELL or a pending type\n    Symbol:     \"EURUSD\",\n    Volume:     0.10,        // lots\n    OpenPrice:  1.08000,     // entry price (or current for market what-if)\n    ClosePrice: 1.08350,     // exit price used for P/L calc\n}\nres, err := svc.account.OrderCalcProfit(ctx, req)\nif err != nil {\n    log.Printf(\"\u274c OrderCalcProfit error: %v\", err)\n    return\n}\nfmt.Printf(\"\ud83d\udcb0 Profit calc: %.2f\\n\", res.GetProfit())\n</code></pre>"},{"location":"Calculations_And_PreliminaryVerification/OrderCalcProfit/#method-signature","title":"Method Signature","text":"<pre><code>func (s *MT5Service) ShowOrderCalcProfit(ctx context.Context, symbol string, orderType pb.ENUM_ORDER_TYPE_TF, volume float64, openPrice, closePrice float64)\n</code></pre>"},{"location":"Calculations_And_PreliminaryVerification/OrderCalcProfit/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Required Description <code>ctx</code> <code>context.Context</code> yes Controls timeout/cancellation for the RPC. <code>symbol</code> <code>string</code> yes Trading symbol (e.g., <code>\"EURUSD\"</code>). <code>orderType</code> <code>pb.ENUM_ORDER_TYPE_TF</code> yes Order kind (BUY/SELL or pending) \u2014 see enum below. <code>volume</code> <code>float64</code> yes Trade volume in lots (respect <code>VolumeMin/Max/Step</code>). <code>openPrice</code> <code>float64</code> yes Entry price used for the what\u2011if scenario. <code>closePrice</code> <code>float64</code> yes Exit price used for the what\u2011if scenario."},{"location":"Calculations_And_PreliminaryVerification/OrderCalcProfit/#enum-enum_order_type_tf","title":"Enum: <code>ENUM_ORDER_TYPE_TF</code>","text":"Code Name Meaning 0 <code>ORDER_TYPE_TF_BUY</code> Market Buy 1 <code>ORDER_TYPE_TF_SELL</code> Market Sell 2 <code>ORDER_TYPE_TF_BUY_LIMIT</code> Pending Buy Limit 3 <code>ORDER_TYPE_TF_SELL_LIMIT</code> Pending Sell Limit 4 <code>ORDER_TYPE_TF_BUY_STOP</code> Pending Buy Stop 5 <code>ORDER_TYPE_TF_SELL_STOP</code> Pending Sell Stop 6 <code>ORDER_TYPE_TF_BUY_STOP_LIMIT</code> Pending Buy Stop-Limit 7 <code>ORDER_TYPE_TF_SELL_STOP_LIMIT</code> Pending Sell Stop-Limit 8 <code>ORDER_TYPE_TF_CLOSE_BY</code> Close by opposite position"},{"location":"Calculations_And_PreliminaryVerification/OrderCalcProfit/#output","title":"\u2b06\ufe0f Output","text":"<p>Returns <code>OrderCalcProfitData</code>.</p> Field Type Description <code>Profit</code> <code>float64</code> P/L in account currency for the provided scenario."},{"location":"Calculations_And_PreliminaryVerification/OrderCalcProfit/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>What\u2011if analysis for risk management and take\u2011profit/stop\u2011loss planning.</li> <li>Validate strategy math without sending any orders.</li> <li>Back\u2011of\u2011the\u2011envelope checks for dashboards and bots.</li> </ul>"},{"location":"Calculations_And_PreliminaryVerification/OrderCalcProfit/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>The result depends on contract size, tick value, and digits \u2014 pair with <code>SymbolParams</code> and <code>TickValueWithSize</code>.</li> <li>For BUY positions: Profit grows as <code>closePrice</code> &gt; <code>openPrice</code>; for SELL \u2014 on the contrary.</li> <li>Consider spreads/commissions/slippage separately; this call focuses on price P/L, not full trade cost.</li> </ul>"},{"location":"Calculations_And_PreliminaryVerification/ShowOrderCheck/","title":"Validating a Trade Request (OrderCheck)","text":"<p>Request: dry\u2011run validation of a trade request without placing it.</p>"},{"location":"Calculations_And_PreliminaryVerification/ShowOrderCheck/#code-example","title":"Code Example","text":"<pre><code>// High-level (prints retcode, comment, and key balances):\nsvc.ShowOrderCheck(ctx,\n    pb.MRPC_ENUM_TRADE_REQUEST_ACTIONS_TRADE_ACTION_DEAL, // action\n    pb.ENUM_ORDER_TYPE_TF_ORDER_TYPE_TF_BUY,              // orderType\n    \"EURUSD\",                                            // symbol\n    0.10,                                                 // volume (lots)\n    0,                                                    // price (0 for market)\n    nil, nil,                                             // sl, tp (optional)\n    nil,                                                  // deviation (optional)\n    nil,                                                  // magic (optional)\n    nil,                                                  // expiration (optional)\n)\n\n// Low-level (build full request):\nreq := &amp;pb.OrderCheckRequest{\n    MqlTradeRequest: &amp;pb.MrpcMqlTradeRequest{\n        Action:    pb.MRPC_ENUM_TRADE_REQUEST_ACTIONS_TRADE_ACTION_DEAL,\n        OrderType: pb.ENUM_ORDER_TYPE_TF_ORDER_TYPE_TF_BUY,\n        Symbol:    \"EURUSD\",\n        Volume:    0.10,\n        Price:     0, // 0 for market; set entry price for pendings\n        StopLoss:  0, // 0 = not set; otherwise absolute price\n        TakeProfit:0, // 0 = not set; otherwise absolute price\n        Deviation: 10, // points (broker settings apply)\n        TypeFilling: pb.MRPC_ENUM_ORDER_TYPE_FILLING_ORDER_FILLING_FOK,\n        TypeTime:    pb.MRPC_ENUM_ORDER_TYPE_TIME_ORDER_TIME_GTC,\n        Expiration:  nil, // set only with *_SPECIFIED time\n        ExpertAdvisorMagicNumber: 123456,\n        Comment: \"check via Go\",\n    },\n}\nres, err := svc.account.OrderCheck(ctx, req)\nif err != nil {\n    log.Printf(\"\u274c OrderCheck error: %v\", err)\n    return\n}\nchk := res.GetMqlTradeCheckResult()\nfmt.Printf(\"retcode=%d comment=%q margin=%.2f free=%.2f profit=%.2f\\n\",\n    chk.GetReturnedCode(), chk.GetComment(), chk.GetMargin(), chk.GetFreeMargin(), chk.GetProfit())\n</code></pre>"},{"location":"Calculations_And_PreliminaryVerification/ShowOrderCheck/#method-signature","title":"Method Signature","text":"<pre><code>func (s *MT5Service) ShowOrderCheck(\n    ctx context.Context,\n    action pb.MRPC_ENUM_TRADE_REQUEST_ACTIONS,\n    orderType pb.ENUM_ORDER_TYPE_TF,\n    symbol string,\n    volume float64,\n    price float64,\n    sl, tp *float64,\n    deviation *uint64,\n    magic *uint64,\n    expiration *timestamppb.Timestamp,\n)\n</code></pre>"},{"location":"Calculations_And_PreliminaryVerification/ShowOrderCheck/#input","title":"\ud83d\udd3d Input","text":""},{"location":"Calculations_And_PreliminaryVerification/ShowOrderCheck/#high-level-helper-parameters","title":"High-level helper parameters","text":"Parameter Type Required Description <code>ctx</code> <code>context.Context</code> yes Timeout/cancel control. <code>action</code> <code>pb.MRPC_ENUM_TRADE_REQUEST_ACTIONS</code> yes What to do (deal/pending/modify/close/etc). <code>orderType</code> <code>pb.ENUM_ORDER_TYPE_TF</code> yes Order type (BUY/SELL/limits/stops/etc). <code>symbol</code> <code>string</code> yes Symbol name. <code>volume</code> <code>float64</code> (lots) yes Trade volume; respect broker <code>VolumeMin/Max/Step</code>. <code>price</code> <code>float64</code> yes Price for the scenario. Use 0 for market; set entry price for pendings. <code>sl</code> <code>*float64</code> no Stop Loss absolute price; <code>nil</code> \u2192 not set. <code>tp</code> <code>*float64</code> no Take Profit absolute price; <code>nil</code> \u2192 not set. <code>deviation</code> <code>*uint64</code> no Max slippage (points) for market orders; <code>nil</code> \u2192 broker default. <code>magic</code> <code>*uint64</code> no Expert Advisor magic number. <code>expiration</code> <code>*google.protobuf.Timestamp</code> no Expiration time; used with <code>*_SPECIFIED</code> time\u2011in\u2011force."},{"location":"Calculations_And_PreliminaryVerification/ShowOrderCheck/#underlying-struct-mrpcmqltraderequest","title":"Underlying struct: <code>MrpcMqlTradeRequest</code>","text":"Field Type Notes <code>Action</code> <code>pb.MRPC_ENUM_TRADE_REQUEST_ACTIONS</code> See enum below. <code>OrderType</code> <code>pb.ENUM_ORDER_TYPE_TF</code> See enum below. <code>Symbol</code> <code>string</code> <code>Volume</code> <code>double</code> Lots. <code>Price</code> <code>double</code> 0 for market. <code>StopLoss</code> <code>double</code> 0 = not set. <code>TakeProfit</code> <code>double</code> 0 = not set. <code>Deviation</code> <code>uint64</code> Points. <code>TypeFilling</code> <code>pb.MRPC_ENUM_ORDER_TYPE_FILLING</code> FOK/IOC. <code>TypeTime</code> <code>pb.MRPC_ENUM_ORDER_TYPE_TIME</code> GTC/Day/Specified. <code>Expiration</code> <code>google.protobuf.Timestamp</code> (optional) Required when <code>TypeTime</code> is <code>*_SPECIFIED</code>. <code>ExpertAdvisorMagicNumber</code> <code>uint64</code> <code>Comment</code> <code>string</code>"},{"location":"Calculations_And_PreliminaryVerification/ShowOrderCheck/#output","title":"\u2b06\ufe0f Output","text":"<p>Returns <code>OrderCheckData</code> with <code>MqlTradeCheckResult</code> inside.</p>"},{"location":"Calculations_And_PreliminaryVerification/ShowOrderCheck/#mqltradecheckresult-key-fields","title":"<code>MqlTradeCheckResult</code> (key fields)","text":"Field Type Description <code>ReturnedCode</code> <code>uint32</code> Result/retcode of the check (0 = success; codes are server\u2011specific). <code>Comment</code> <code>string</code> Human\u2011readable comment from server. <code>BalanceAfterDeal</code> <code>double</code> Balance after hypothetical execution. <code>EquityAfterDeal</code> <code>double</code> Equity after hypothetical execution. <code>Profit</code> <code>double</code> P/L effect of the scenario. <code>Margin</code> <code>double</code> Margin that would be used. <code>FreeMargin</code> <code>double</code> Free margin left. <code>MarginLevel</code> <code>double</code> Margin level percentage."},{"location":"Calculations_And_PreliminaryVerification/ShowOrderCheck/#enums","title":"Enums","text":""},{"location":"Calculations_And_PreliminaryVerification/ShowOrderCheck/#mrpc_enum_trade_request_actions","title":"<code>MRPC_ENUM_TRADE_REQUEST_ACTIONS</code>","text":"Code Name Meaning 0 <code>TRADE_ACTION_DEAL</code> Market execution (buy/sell). 1 <code>TRADE_ACTION_PENDING</code> Place pending order. 2 <code>TRADE_ACTION_SLTP</code> Modify SL/TP for position/order. 3 <code>TRADE_ACTION_MODIFY</code> Modify order parameters. 4 <code>TRADE_ACTION_REMOVE</code> Delete pending order. <p>There might be additional values depending on your <code>pb</code> version; always check the source.</p>"},{"location":"Calculations_And_PreliminaryVerification/ShowOrderCheck/#enum_order_type_tf","title":"<code>ENUM_ORDER_TYPE_TF</code>","text":"<p>(see full table in OrderCalcMargin / OrderCalcProfit cards).</p>"},{"location":"Calculations_And_PreliminaryVerification/ShowOrderCheck/#mrpc_enum_order_type_filling","title":"<code>MRPC_ENUM_ORDER_TYPE_FILLING</code>","text":"Code Name Meaning 0 <code>ORDER_FILLING_FOK</code> Fill\u2011or\u2011Kill. 1 <code>ORDER_FILLING_IOC</code> Immediate\u2011or\u2011Cancel."},{"location":"Calculations_And_PreliminaryVerification/ShowOrderCheck/#mrpc_enum_order_type_time","title":"<code>MRPC_ENUM_ORDER_TYPE_TIME</code>","text":"Code Name Meaning 0 <code>ORDER_TIME_GTC</code> Good\u2011Till\u2011Cancel. 1 <code>ORDER_TIME_DAY</code> Good\u2011For\u2011Day. 2 <code>ORDER_TIME_SPECIFIED</code> Good\u2011Till specified timestamp. 3 <code>ORDER_TIME_SPECIFIED_DAY</code> Good\u2011Till end of specified day."},{"location":"Calculations_And_PreliminaryVerification/ShowOrderCheck/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Pre\u2011flight validation before <code>OrderSend</code> to avoid rejects and surprises.</li> <li>Estimate balances/margin after the hypothetical deal.</li> <li>Validate broker rules (filling policy, time\u2011in\u2011force) per symbol.</li> </ul>"},{"location":"Calculations_And_PreliminaryVerification/ShowOrderCheck/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Price=0 is commonly accepted for market checks; for pendings always provide the intended entry price.</li> <li><code>StopLoss</code>/<code>TakeProfit</code> are absolute prices (not offsets); compute them from ticks/pips and <code>Digits</code>.</li> <li><code>Deviation</code> is in points; map your UI \u201cpips\u201d carefully (for 5\u2011digit FX, 1 pip = 10 points).</li> <li>If you pass <code>TypeTime=*_SPECIFIED</code>, you must set <code>Expiration</code>, otherwise the server will reject the request.</li> <li>Treat <code>ReturnedCode</code> as authoritative; even successful checks don\u2019t guarantee later <code>OrderSend</code> success if market moves.</li> </ul>"},{"location":"Calculations_And_PreliminaryVerification/Verification_Overview/","title":"Calculations &amp; Preliminary Verification \u2014 Overview","text":"<p>This section groups together methods for pre-trade calculations and order verification. They allow you to check whether an order is valid, and to estimate margin and profit before actually placing it.</p>"},{"location":"Calculations_And_PreliminaryVerification/Verification_Overview/#methods-in-this-section","title":"\ud83d\udcc2 Methods in this Section","text":"<ul> <li> <p>OrderCalcMargin.md   Estimate required margin for a potential trade before opening it.</p> </li> <li> <p>OrderCalcProfit.md   Calculate expected profit or loss for a trade, given entry/exit prices.</p> </li> <li> <p>ShowOrderCheck.md   Perform a full order validation (volume, price, stop levels, free margin).</p> </li> </ul>"},{"location":"Calculations_And_PreliminaryVerification/Verification_Overview/#example-workflow","title":"\u26a1 Example Workflow","text":"<pre><code>// Example: check if order is valid before sending\n\n// 1. Calculate margin requirement\nmargin, _ := svc.OrderCalcMargin(ctx, symbol, lotSize, orderType, price)\n\n// 2. Estimate profit for target exit\nprofit, _ := svc.OrderCalcProfit(ctx, symbol, lotSize, orderType, entry, exit)\n\n// 3. Run broker's internal order check\ncheckResult, _ := svc.ShowOrderCheck(ctx, orderRequest)\n</code></pre>"},{"location":"Calculations_And_PreliminaryVerification/Verification_Overview/#best-practices","title":"\u2705 Best Practices","text":"<ol> <li>Always check before sending \u2014 avoid rejected trades and wasted time.</li> <li>Use <code>OrderCalcMargin</code> to prevent margin-call surprises.</li> <li>Use <code>OrderCalcProfit</code> for quick risk/reward estimation.</li> <li>Combine all three for robust pre-trade validation.</li> </ol>"},{"location":"Calculations_And_PreliminaryVerification/Verification_Overview/#purpose","title":"\ud83c\udfaf Purpose","text":"<p>The methods in this block allow you to:</p> <ul> <li>Simulate trades without execution.</li> <li>Estimate margin and risk in advance.</li> <li>Validate orders before sending them to the broker.</li> <li>Build custom risk-management logic.</li> </ul> <p>\ud83d\udc49 Use this overview as a map, and jump into each <code>.md</code> file for full method details.</p>"},{"location":"History_And_SimpleStatistics/DealByTicket/","title":"ShowDealByTicket","text":"<p>Request: retrieve a single deal record from history by its deal ticket ID.</p>"},{"location":"History_And_SimpleStatistics/DealByTicket/#code-example","title":"Code Example","text":"<pre><code>dealID := uint64(987654321)\n\nerr := svc.ShowDealByTicket(ctx, dealID)\nif err != nil {\n    log.Printf(\"\u274c ShowDealByTicket error: %v\", err)\n    return\n}\n</code></pre>"},{"location":"History_And_SimpleStatistics/DealByTicket/#method-signature","title":"Method Signature","text":"<pre><code>func (s *MT5Service) ShowDealByTicket(ctx context.Context, ticket uint64) error\n</code></pre>"},{"location":"History_And_SimpleStatistics/DealByTicket/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Required Description <code>ctx</code> <code>context.Context</code> yes Context for cancellation / timeout control. <code>ticket</code> <code>uint64</code> yes Deal ticket ID to fetch."},{"location":"History_And_SimpleStatistics/DealByTicket/#output","title":"\u2b06\ufe0f Output","text":"<p>Prints details of a deal (trade execution). Fields (from <code>DealRecordData</code>):</p> Field Type Description <code>Deal</code> <code>uint64</code> Deal ticket ID. <code>Order</code> <code>uint64</code> Associated order ticket. <code>Symbol</code> <code>string</code> Symbol name (e.g., <code>EURUSD</code>). <code>Volume</code> <code>double</code> Executed volume. <code>Price</code> <code>double</code> Execution price. <code>Commission</code> <code>double</code> Applied commission. <code>Swap</code> <code>double</code> Applied swap (overnight fee). <code>Profit</code> <code>double</code> Profit or loss from this deal. <code>Entry</code> <code>enum</code> Entry type: <code>IN</code>, <code>OUT</code>, <code>INOUT</code>, etc. <code>Time</code> <code>int64</code> Unix timestamp of execution. <code>Comment</code> <code>string</code> Broker comment if present."},{"location":"History_And_SimpleStatistics/DealByTicket/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Fetch a single executed deal from history.</li> <li>Use when you know the exact deal ticket and need full info (audit, debugging, reconciliation).</li> <li>Complements <code>ShowOrderByTicket</code>, but operates on deals instead of orders.</li> </ul>"},{"location":"History_And_SimpleStatistics/DealByTicket/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Deals are immutable: once executed, their record does not change.</li> <li>Not all deals have corresponding orders (e.g., balance operations).</li> <li>Always check <code>Profit</code> and <code>Commission</code> fields to compute net effect.</li> <li>Time is UTC \u2014 convert if you need local reporting.</li> </ul>"},{"location":"History_And_SimpleStatistics/HistoryAndStats_Overview/","title":"History &amp; Simple Statistics \u2014 Overview","text":"<p>This section groups together methods for retrieving historical data and basic statistics. It is useful for building account analytics, trade logs, and monitoring dashboards.</p>"},{"location":"History_And_SimpleStatistics/HistoryAndStats_Overview/#methods-in-this-section","title":"\ud83d\udcc2 Methods in this Section","text":"<ul> <li> <p>ShowOrdersHistory.md   Get all historical orders in a selected time range.</p> </li> <li> <p>ShowDealsCount.md   Retrieve the number of executed deals within a time period.</p> </li> <li> <p>OrderByTicket.md   Fetch a specific historical order by its ticket ID.</p> </li> <li> <p>DealByTicket.md   Fetch a specific historical deal by its ticket ID.</p> </li> <li> <p>History_Range(important).md   Detailed explanation of how to define time ranges (<code>from</code> / <code>to</code>) in Go.</p> </li> </ul>"},{"location":"History_And_SimpleStatistics/HistoryAndStats_Overview/#time-range-example","title":"\ud83d\udd52 Time Range Example","text":"<p>All history methods use a time range for filtering. Example: last 7 days.</p> <pre><code>from := time.Now().AddDate(0, 0, -7) // 7 days ago\nto   := time.Now()                   // current moment\n\nsvc.ShowOrdersHistory(ctx, from, to)\nsvc.ShowDealsCount(ctx, from, to, \"\")\n</code></pre> <ul> <li><code>from</code> \u2192 lower bound (inclusive).</li> <li><code>to</code> \u2192 upper bound (exclusive).</li> <li>Both values are converted into Unix timestamps internally.</li> </ul>"},{"location":"History_And_SimpleStatistics/HistoryAndStats_Overview/#best-practices","title":"\u2705 Best Practices","text":"<ol> <li>Always define <code>from</code> and <code>to</code> \u2014 otherwise you risk requesting a huge history.</li> <li>Use small ranges when testing (e.g., 1\u20133 days).</li> <li>For performance: prefer <code>DealsCount</code> when you only need statistics.</li> <li>For details: use <code>OrderByTicket</code> or <code>DealByTicket</code> for precise lookups.</li> <li>Check broker\u2019s server limits \u2014 some servers restrict history depth (e.g., 1 year max).</li> </ol>"},{"location":"History_And_SimpleStatistics/HistoryAndStats_Overview/#purpose","title":"\ud83c\udfaf Purpose","text":"<p>The methods in this block allow you to:</p> <ul> <li>Build trade history reports.</li> <li>Generate statistics (win rate, trade count, average profit).</li> <li>Backtest simple strategies using real historical executions.</li> <li>Diagnose trading activity and validate orders/deals by ticket ID.</li> </ul> <p>\ud83d\udc49 Use this overview as a map, and jump into each <code>.md</code> file for full method details.</p>"},{"location":"History_And_SimpleStatistics/History_Range%28important%29/","title":"\ud83d\udd52 History Range (<code>from</code>/<code>to</code>) \u2014 How to Use","text":"<p>Purpose: correctly build and pass <code>time.Time</code> ranges to history/statistics methods (orders &amp; deals). Includes ready\u2011to\u2011copy helpers, timezone tips, and gotchas.</p>"},{"location":"History_And_SimpleStatistics/History_Range%28important%29/#tldr","title":"TL;DR","text":"<pre><code>// Last 7 days\nfrom := time.Now().AddDate(0, 0, -7)\nto   := time.Now()\n\n// Use with history APIs:\nsvc.ShowOrdersHistory(ctx)           // (helper internally builds a range)\nsvc.ShowDealsCount(ctx, from, to, \"\")\n</code></pre> <ul> <li><code>from</code> \u2014 start of interval</li> <li><code>to</code>   \u2014 end of interval</li> <li>Prefer UTC or a fixed timezone for consistency; convert explicitly when needed.</li> </ul>"},{"location":"History_And_SimpleStatistics/History_Range%28important%29/#where-ranges-are-required","title":"Where ranges are required \u2705","text":"<p>These high\u2011level helpers and/or underlying RPCs need a time range:</p> <ul> <li><code>ShowOrdersHistory(ctx)</code> \u2192 uses a range internally (e.g., last 7 days)</li> <li><code>ShowDealsCount(ctx, from, to, symbol)</code> \u2192 you pass <code>from</code>/<code>to</code></li> </ul> <p>Methods by ticket (<code>ShowOrderByTicket</code>, <code>ShowDealByTicket</code>) do not need a range.</p>"},{"location":"History_And_SimpleStatistics/History_Range%28important%29/#patterns-recipes","title":"Patterns &amp; Recipes \ud83c\udf73","text":""},{"location":"History_And_SimpleStatistics/History_Range%28important%29/#1-last-n-days","title":"1) Last N days","text":"<pre><code>func LastNDays(n int) (time.Time, time.Time) {\n    to := time.Now().UTC()\n    from := to.AddDate(0, 0, -n)\n    return from, to\n}\nfrom, to := LastNDays(7)\n</code></pre>"},{"location":"History_And_SimpleStatistics/History_Range%28important%29/#2-current-day-local-timezone","title":"2) Current day (local timezone)","text":"<pre><code>loc := time.Local // or time.FixedZone(...)\nnow := time.Now().In(loc)\nstart := time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, loc)\nend   := start.Add(24*time.Hour - time.Nanosecond)\nfrom, to := start, end\n</code></pre>"},{"location":"History_And_SimpleStatistics/History_Range%28important%29/#3-this-week-monsun-in-a-specific-tz","title":"3) This week (Mon..Sun) in a specific TZ","text":"<pre><code>loc, _ := time.LoadLocation(\"Europe/London\")\nnow := time.Now().In(loc)\noffset := (int(now.Weekday()) + 6) % 7 // Monday=0\nmonday := time.Date(now.Year(), now.Month(), now.Day(), 0,0,0,0, loc).AddDate(0,0,-offset)\nfrom := monday\nto   := monday.AddDate(0,0,7).Add(-time.Nanosecond)\n</code></pre>"},{"location":"History_And_SimpleStatistics/History_Range%28important%29/#4-month-to-date-utc","title":"4) Month to date (UTC)","text":"<pre><code>now := time.Now().UTC()\nstart := time.Date(now.Year(), now.Month(), 1, 0,0,0,0, time.UTC)\nfrom, to := start, now\n</code></pre>"},{"location":"History_And_SimpleStatistics/History_Range%28important%29/#passing-to-methods","title":"Passing to methods \ud83e\udde9","text":""},{"location":"History_And_SimpleStatistics/History_Range%28important%29/#showdealscount","title":"<code>ShowDealsCount</code>","text":"<pre><code>from := time.Now().AddDate(0,0,-7)\nto   := time.Now()\n// all symbols\nsvc.ShowDealsCount(ctx, from, to, \"\")\n// single symbol\nsvc.ShowDealsCount(ctx, from, to, \"EURUSD\")\n</code></pre>"},{"location":"History_And_SimpleStatistics/History_Range%28important%29/#showordershistory","title":"<code>ShowOrdersHistory</code>","text":"<p>The helper already sets a default range (last 7 days). To customize, make your own wrapper that calls the underlying RPC with your <code>from</code>/<code>to</code>.</p> <pre><code>func ShowOrdersHistoryRange(ctx context.Context, svc *MT5Service, from, to time.Time) {\n    sortMode := pb.BMT5_ENUM_ORDER_HISTORY_SORT_TYPE_BMT5_SORT_BY_CLOSE_TIME_DESC\n    data, err := svc.account.OrdersHistory(ctx, sortMode, &amp;from, &amp;to, nil, nil)\n    if err != nil {\n        log.Printf(\"\u274c OrdersHistory error: %v\", err)\n        return\n    }\n    for _, item := range data.GetHistoryData() {\n        o := item.GetHistoryOrder()\n        if o == nil { continue }\n        fmt.Printf(\"[%s] #%d %s vol=%.2f open=%.5f last=%.5f closed=%s\\n\",\n            o.GetType().String(), o.GetTicket(), o.GetSymbol(), o.GetVolumeInitial(),\n            o.GetPriceOpen(), o.GetPriceCurrent(), o.GetDoneTime().AsTime().Format(\"2006-01-02 15:04:05\"))\n    }\n}\n</code></pre>"},{"location":"History_And_SimpleStatistics/History_Range%28important%29/#timezone-strategy","title":"Timezone strategy \ud83c\udf0d","text":"<ul> <li>Prefer UTC for program logic: <code>time.Now().UTC()</code> \u2014 avoids DST surprises.</li> <li>Convert for display: <code>t.In(userTZ)</code>.</li> <li>If your broker/server follows a known TZ (e.g., EET for many FX servers), build ranges in that TZ for reporting cutoff times.</li> </ul> <pre><code>loc, _ := time.LoadLocation(\"Europe/Athens\") // example server TZ\nfrom := time.Date(2025, 8, 1, 0,0,0,0, loc)\nto   := time.Date(2025, 8, 31,23,59,59, 0, loc)\n</code></pre>"},{"location":"History_And_SimpleStatistics/History_Range%28important%29/#inclusivity-edges-gaps","title":"Inclusivity, edges &amp; gaps \u26a0\ufe0f","text":"<ul> <li>Some backends treat <code>to</code> as an exclusive bound. To be safe, bump <code>to</code> slightly:</li> </ul> <p><pre><code>toSafe := to.Add(1 * time.Second)\n</code></pre> * Ensure <code>from.Before(to)</code>; if not, swap or adjust. * Very large ranges \u2192 big payloads / pagination. Prefer smaller windows (7\u201330 days) for interactive tooling. * Clock skew: if machines have wrong clocks, you may miss the newest items \u2014 sync time (NTP).</p>"},{"location":"History_And_SimpleStatistics/History_Range%28important%29/#validation-helpers","title":"Validation helpers \u2705","text":"<pre><code>func ClampRange(from, to time.Time) (time.Time, time.Time) {\n    if to.Before(from) { from, to = to, from }\n    return from, to\n}\n\nfunc EndOfDay(t time.Time) time.Time {\n    loc := t.Location()\n    return time.Date(t.Year(), t.Month(), t.Day(), 23,59,59, 999_999_999, loc)\n}\n</code></pre>"},{"location":"History_And_SimpleStatistics/History_Range%28important%29/#faq","title":"FAQ \u2753","text":"<p>Q: Do I need milliseconds? A: Seconds are typically enough; keep <code>time.Time</code> precision, the PB layer handles it.</p> <p>Q: Should I always use UTC? A: Use UTC for logic; convert for presentation/reporting. If server accounting days close in a specific TZ, build ranges in that TZ.</p> <p>Q: Why is my 7\u2011day query empty? A: Check account/activity, symbol filter, trading days, and ensure <code>to</code> isn\u2019t in the past (e.g., stale clock).</p>"},{"location":"History_And_SimpleStatistics/History_Range%28important%29/#copypaste-snippets","title":"Copy\u2011paste snippets \ud83d\udccb","text":"<pre><code>// Last 7 days UTC\nfrom := time.Now().UTC().AddDate(0,0,-7)\nto   := time.Now().UTC()\n\n// Today in local TZ\nnow := time.Now()\nfrom = time.Date(now.Year(), now.Month(), now.Day(), 0,0,0,0, now.Location())\nto   = EndOfDay(now)\n\n// Month\u2011to\u2011date UTC\nnow = time.Now().UTC()\nfrom = time.Date(now.Year(), now.Month(), 1, 0,0,0,0, time.UTC)\nto   = now\n</code></pre>"},{"location":"History_And_SimpleStatistics/OrderByTicket/","title":"\ud83d\udd0e Lookup Historical Order by Ticket","text":"<p>Request: fetch details of a historical order by its unique <code>ticket</code> (no time range needed).</p>"},{"location":"History_And_SimpleStatistics/OrderByTicket/#code-example","title":"Code Example","text":"<pre><code>// High-level helper (prints a formatted summary):\nsvc.ShowOrderByTicket(ctx, 123456789)\n\n// Internals (simplified):\no, err := svc.account.HistoryOrderByTicket(ctx, 123456789)\nif err != nil {\n    log.Printf(\"\u274c HistoryOrderByTicket error: %v\", err)\n    return\n}\nif o == nil {\n    fmt.Printf(\"\u26a0\ufe0f Historical order %d not found\\n\", 123456789)\n    return\n}\n\nvol  := o.GetVolumeInitial()\nopen := o.GetPriceOpen()\nlast := o.GetPriceCurrent()\nfmt.Printf(\"\ud83d\udcdc Order #%d | %s | VolumeInitial: %.2f | PriceOpen: %.5f | LastPrice: %.5f\",\n    o.GetTicket(), o.GetSymbol(), vol, open, last)\nif ts := o.GetDoneTime(); ts != nil {\n    fmt.Printf(\" | Done: %s\", ts.AsTime().Format(\"2006-01-02 15:04:05\"))\n}\nfmt.Println()\n</code></pre>"},{"location":"History_And_SimpleStatistics/OrderByTicket/#method-signature","title":"Method Signature","text":"<pre><code>func (s *MT5Service) ShowOrderByTicket(ctx context.Context, ticket uint64)\n</code></pre>"},{"location":"History_And_SimpleStatistics/OrderByTicket/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Required Description <code>ctx</code> <code>context.Context</code> yes Timeout/cancel control. <code>ticket</code> <code>uint64</code> yes Order ticket to look up in history. <p>No <code>from/to</code> range is required for lookup by ticket.</p>"},{"location":"History_And_SimpleStatistics/OrderByTicket/#output","title":"\u2b06\ufe0f Output","text":"<p>Prints selected fields from the returned historical order:</p> Field Type Description <code>Ticket</code> <code>uint64</code> Order ticket ID. <code>Symbol</code> <code>string</code> Instrument. <code>Type</code> <code>enum</code> Order type (Buy/Sell/Limit/Stop/\u2026). <code>VolumeInitial</code> <code>double</code> Requested volume. <code>PriceOpen</code> <code>double</code> Requested/open price. <code>PriceCurrent</code> <code>double</code> Last price stored for the order. <code>TimeSetup</code> <code>time</code> When order was placed. <code>TimeDone</code> <code>time</code> When order was closed/cancelled/expired."},{"location":"History_And_SimpleStatistics/OrderByTicket/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Pinpoint an exact order by its ticket to audit behavior and lifecycle.</li> <li>Useful in support tickets, logs correlation, and reconciliation tasks.</li> </ul>"},{"location":"History_And_SimpleStatistics/OrderByTicket/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Orders vs Deals: this returns order metadata; if you need the executed fill(s), use <code>ShowDealByTicket</code>.</li> <li>If the ticket is very recent and still open, it may not appear in history. Check <code>OpenedOrders</code> first if needed.</li> <li>Timestamps are server timestamps; convert with <code>t.In(userTZ)</code> for display.</li> </ul>"},{"location":"History_And_SimpleStatistics/ShowDealsCount/","title":"Counting Deals in a Range","text":"<p>Request: get the number of executed deals within a specific time range.</p>"},{"location":"History_And_SimpleStatistics/ShowDealsCount/#code-example","title":"Code Example","text":"<pre><code>from := time.Now().AddDate(0, 0, -7) // 7 days ago\nto   := time.Now()                   // now\n\nsvc.ShowDealsCount(ctx, from, to, \"\")\n</code></pre>"},{"location":"History_And_SimpleStatistics/ShowDealsCount/#method-signature","title":"Method Signature","text":"<pre><code>func (s *MT5Service) ShowDealsCount(ctx context.Context, from, to time.Time, symbol string)\n</code></pre>"},{"location":"History_And_SimpleStatistics/ShowDealsCount/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Required Description <code>ctx</code> <code>context.Context</code> yes Timeout / cancellation control. <code>from</code> <code>time.Time</code> yes Start of time interval. See: History Range Note. <code>to</code> <code>time.Time</code> yes End of time interval. See: History Range Note. <code>symbol</code> <code>string</code> no Symbol filter (e.g. <code>\"EURUSD\"</code>), empty string \u2192 all deals."},{"location":"History_And_SimpleStatistics/ShowDealsCount/#output","title":"\u2b06\ufe0f Output","text":"<p>Prints a single integer count of all deals found in the given range (optionally filtered by symbol).</p> Field Type Description <code>Count</code> <code>int</code> Number of executed deals."},{"location":"History_And_SimpleStatistics/ShowDealsCount/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Quick activity metric: how many trades were executed in the selected period.</li> <li>Useful for statistics, reports, and trading frequency analysis.</li> <li>When combined with <code>ShowOrdersHistory</code>, gives both orders placed and deals executed.</li> </ul>"},{"location":"History_And_SimpleStatistics/ShowDealsCount/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Always ensure <code>from &lt; to</code>, otherwise you\u2019ll get empty results or errors.</li> <li>Use empty <code>symbol</code> when you want total activity across all instruments.</li> <li>Works well for periodic reporting (daily, weekly, monthly trade counts).</li> <li>\ud83d\udd17 For <code>from/to</code> handling see: History_Range(important).</li> </ul>"},{"location":"History_And_SimpleStatistics/ShowOrdersHistory/","title":"ShowOrdersHistory","text":"<p>Request: retrieve and display the list of past orders within a specified time range.</p>"},{"location":"History_And_SimpleStatistics/ShowOrdersHistory/#code-example","title":"Code Example","text":"<pre><code>from := time.Now().AddDate(0, 0, -7) // 7 days ago\nto   := time.Now()                   // now\n\nsvc.ShowOrdersHistory(ctx, from, to)\n</code></pre> <p>Internally this calls the account method to fetch all closed/cancelled/expired orders that fall into the requested time interval.</p>"},{"location":"History_And_SimpleStatistics/ShowOrdersHistory/#method-signature","title":"Method Signature","text":"<pre><code>func (s *MT5Service) ShowOrdersHistory(ctx context.Context, from time.Time, to time.Time)\n</code></pre>"},{"location":"History_And_SimpleStatistics/ShowOrdersHistory/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Required Description <code>ctx</code> <code>context.Context</code> yes Controls timeout/cancel. <code>from</code> <code>time.Time</code> yes Start of time range (inclusive). <code>to</code> <code>time.Time</code> yes End of time range (exclusive). <p>\ud83d\udcce For practical usage and examples on how to construct <code>from</code> and <code>to</code> (week, today, month-to-date, etc.) see \ud83d\udc49 History_Range(important)</p>"},{"location":"History_And_SimpleStatistics/ShowOrdersHistory/#output","title":"\u2b06\ufe0f Output","text":"<p>Prints the retrieved orders to console. Each order record may include:</p> Field Type Description <code>Order</code> uint64 Ticket ID. <code>Symbol</code> string Instrument traded. <code>VolumeInitial</code> double Requested volume. <code>VolumeCurrent</code> double Remaining volume (if partially filled). <code>PriceOpen</code> double Requested/open price. <code>PriceCurrent</code> double Current market price at close. <code>Type</code> enum Order type (Buy, Sell, Limit, Stop, etc.). <code>State</code> enum Final order state (filled, cancelled, expired). <code>Reason</code> enum Why the order was closed/cancelled. <code>TimeSetup</code> time When order was placed. <code>TimeDone</code> time When order was closed/expired."},{"location":"History_And_SimpleStatistics/ShowOrdersHistory/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Inspect what trades/orders were placed and how they evolved.</li> <li>Debug past executions (why order was cancelled or rejected).</li> <li>Collect statistics (counts, volumes, durations).</li> </ul>"},{"location":"History_And_SimpleStatistics/ShowOrdersHistory/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>MT5 differentiates Orders (instructions) from Deals (executed fills). Orders may result in zero, one, or many deals.</li> <li>History can be large \u2192 always restrict <code>from/to</code> range.</li> <li>Use <code>ShowDealsCount</code> or per-ticket lookups (<code>ShowOrderByTicket</code>, <code>ShowDealByTicket</code>) for more targeted queries.</li> </ul>"},{"location":"Opened_State_Snapshot/HasOpenPosition/","title":"Checking If a Symbol Has an Open Position","text":"<p>Request: lightweight boolean check if there is an open position for a given symbol.</p>"},{"location":"Opened_State_Snapshot/HasOpenPosition/#code-example","title":"Code Example","text":"<pre><code>// High-level (prints the result):\nsvc.ShowHasOpenPosition(ctx, \"EURUSD\")\n\n// Low-level (use the boolean directly):\nok, err := svc.account.HasOpenPosition(ctx, \"EURUSD\")\nif err != nil {\n    log.Printf(\"\u274c HasOpenPosition error: %v\", err)\n    return\n}\nif ok {\n    fmt.Println(\"\u2705 There is an open position for EURUSD\")\n} else {\n    fmt.Println(\"\u2139\ufe0f No open position for EURUSD\")\n}\n</code></pre>"},{"location":"Opened_State_Snapshot/HasOpenPosition/#method-signature","title":"Method Signature","text":"<pre><code>func (s *MT5Service) ShowHasOpenPosition(ctx context.Context, symbol string)\n</code></pre>"},{"location":"Opened_State_Snapshot/HasOpenPosition/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Required Description <code>ctx</code> <code>context.Context</code> yes Controls timeout/cancellation for the RPC. <code>symbol</code> <code>string</code> yes Trading symbol name (e.g., <code>\"EURUSD\"</code>)."},{"location":"Opened_State_Snapshot/HasOpenPosition/#output","title":"\u2b06\ufe0f Output","text":"<p>Low-level call returns:</p> Field Type Description <code>ok</code> <code>bool</code> <code>true</code> if there is an open position, else <code>false</code>. <code>err</code> <code>error</code> Non-nil if the RPC failed. <p>High-level helper prints a human-readable line with the result.</p>"},{"location":"Opened_State_Snapshot/HasOpenPosition/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Fast pre-check before modifying/closing a position.</li> <li>Gate logic in bots (e.g., avoid duplicate position opens).</li> <li>Lightweight health check per symbol without downloading all positions.</li> </ul>"},{"location":"Opened_State_Snapshot/HasOpenPosition/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Symbol must be valid and (preferably) visible; otherwise the terminal/broker may return an error.</li> <li>This is a light boolean; if you need details (ticket, volume, prices), call <code>PositionGet(ctx, symbol)</code> or <code>PositionsGet(ctx)</code>.</li> <li>On netting accounts, there is at most one position per symbol. On hedging setups, semantics may differ (but MT5 netting is default for many brokers).</li> </ul>"},{"location":"Opened_State_Snapshot/OpenedOrderTickets/","title":"Listing Open Order Tickets (IDs Only)","text":"<p>Request: fetch lightweight lists of open ticket IDs (positions + pending orders).</p>"},{"location":"Opened_State_Snapshot/OpenedOrderTickets/#code-example","title":"Code Example","text":"<pre><code>// High-level (prints IDs):\nsvc.ShowOpenedOrderTickets(ctx)\n\n// Low-level (work with IDs directly):\ndata, err := svc.account.OpenedOrdersTickets(ctx)\nif err != nil {\n    log.Printf(\"\u274c OpenedOrdersTickets error: %v\", err)\n    return\n}\npositionIDs := data.GetPositionTickets()       // []uint64\npendingIDs  := data.GetPendingOrderTickets()   // []uint64\nfmt.Println(\"Positions:\", positionIDs)\nfmt.Println(\"Pending:\", pendingIDs)\n</code></pre>"},{"location":"Opened_State_Snapshot/OpenedOrderTickets/#method-signature","title":"Method Signature","text":"<pre><code>func (s *MT5Service) ShowOpenedOrderTickets(ctx context.Context)\n</code></pre>"},{"location":"Opened_State_Snapshot/OpenedOrderTickets/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Required Description <code>ctx</code> <code>context.Context</code> yes Controls timeout/cancellation for the RPC."},{"location":"Opened_State_Snapshot/OpenedOrderTickets/#output","title":"\u2b06\ufe0f Output","text":"<p>Returns <code>OpenedOrdersTicketsData</code> with two slices of ticket IDs.</p> Field Type Description <code>PositionTickets</code> <code>[]uint64</code> Tickets of currently open positions. <code>PendingOrderTickets</code> <code>[]uint64</code> Tickets of active pending orders. <p>This call is intentionally lightweight compared to <code>OpenedOrders</code>, useful when you only need identifiers.</p>"},{"location":"Opened_State_Snapshot/OpenedOrderTickets/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Quickly obtain lists of IDs to drive follow-up calls (e.g., <code>HistoryOrderByTicket</code>, <code>OrderModify</code>, <code>OrderClose</code>).</li> <li>Build compact UIs or health checks without downloading full order payloads.</li> </ul>"},{"location":"Opened_State_Snapshot/OpenedOrderTickets/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>An empty list is normal when there are no active positions/pending orders.</li> <li>Combine with <code>OpenedOrders</code> if you need full details beyond IDs.</li> <li>Tickets are <code>uint64</code> \u2014 store/print them without lossy conversions.</li> </ul>"},{"location":"Opened_State_Snapshot/OpenedOrders/","title":"Listing Opened Orders","text":"<p>Request: fetch snapshot of currently opened (active) orders and positions in one call.</p>"},{"location":"Opened_State_Snapshot/OpenedOrders/#code-example","title":"Code Example","text":"<pre><code>// High-level (prints selected fields per order):\nsvc.ShowOpenedOrders(ctx)\n\n// Low-level (full access):\nreq := &amp;pb.OpenedOrdersRequest{ /* optional: InputSortMode */ }\n// If you don't need custom sort, just pass zero-value request.\n\n// wrapper call in your service does this internally:\ndata, err := svc.account.OpenedOrders(ctx)\nif err != nil {\n    log.Printf(\"\u274c OpenedOrders error: %v\", err)\n    return\n}\norders := data.GetOpenedOrders()\nif len(orders) == 0 {\n    fmt.Println(\"\ud83d\udced No opened orders.\")\n}\nfor _, o := range orders {\n    fmt.Printf(\"[%s] Ticket:%d Symbol:%s Vol:%.2f Open:%.5f Curr:%.5f\\n\",\n        o.GetType().String(), o.GetTicket(), o.GetSymbol(),\n        o.GetVolumeInitial(), o.GetPriceOpen(), o.GetPriceCurrent())\n}\n</code></pre>"},{"location":"Opened_State_Snapshot/OpenedOrders/#method-signature","title":"Method Signature","text":"<pre><code>func (s *MT5Service) ShowOpenedOrders(ctx context.Context)\n</code></pre>"},{"location":"Opened_State_Snapshot/OpenedOrders/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Required Description <code>ctx</code> <code>context.Context</code> yes Controls timeout/cancellation for the RPC. <p>Low-level API also accepts <code>OpenedOrdersRequest</code> with optional <code>InputSortMode</code>.</p> <p>Enum: <code>BMT5_ENUM_OPENED_ORDER_SORT_TYPE</code></p> Value Name Meaning 0 <code>BMT5_OPENED_ORDER_SORT_BY_OPEN_TIME_ASC</code> By open time (ascending) 1 <code>BMT5_OPENED_ORDER_SORT_BY_OPEN_TIME_DESC</code> By open time (descending) 2 <code>BMT5_OPENED_ORDER_SORT_BY_ORDER_TICKET_ID_ASC</code> By ticket (ascending) 3 <code>BMT5_OPENED_ORDER_SORT_BY_ORDER_TICKET_ID_DESC</code> By ticket (descending)"},{"location":"Opened_State_Snapshot/OpenedOrders/#output","title":"\u2b06\ufe0f Output","text":"<p>RPC returns <code>OpenedOrdersData</code> with two arrays:</p> Field Type Description <code>OpenedOrders</code> <code>[]*OpenedOrderInfo</code> Active orders (market &amp; pending). <code>PositionInfos</code> <code>[]*PositionInfo</code> Open positions snapshot (see separate doc)."},{"location":"Opened_State_Snapshot/OpenedOrders/#openedorderinfo-key-fields","title":"<code>OpenedOrderInfo</code> (key fields)","text":"Field Type Description <code>Ticket</code> <code>uint64</code> Order ticket ID. <code>Symbol</code> <code>string</code> Symbol name. <code>Type</code> <code>BMT5_ENUM_ORDER_TYPE</code> Order type (see enum below). <code>State</code> <code>BMT5_ENUM_ORDER_STATE</code> Current order state. <code>VolumeInitial</code> <code>double</code> Initial lot size. <code>VolumeCurrent</code> <code>double</code> Remaining lot (for partial fills). <code>PriceOpen</code> <code>double</code> Open/placed price. <code>PriceCurrent</code> <code>double</code> Current price. <code>StopLoss</code> <code>double</code> SL price. <code>TakeProfit</code> <code>double</code> TP price. <code>StopLimit</code> <code>double</code> StopLimit price (for stop-limit orders). <code>TimeSetup</code> <code>google.protobuf.Timestamp</code> When order was created. <code>TimeExpiration</code> <code>google.protobuf.Timestamp</code> Expiration time (if set). <code>TimeDone</code> <code>google.protobuf.Timestamp</code> Completion time (if filled/canceled/expired). <code>TypeFilling</code> <code>BMT5_ENUM_ORDER_TYPE_FILLING</code> Execution policy (FOK/IOC). <code>TypeTime</code> <code>BMT5_ENUM_ORDER_TYPE_TIME</code> Time-in-force. <code>PositionId</code> <code>int64</code> Linked position id (if any). <code>PositionById</code> <code>int64</code> Opposite position id for close-by. <code>MagicNumber</code> <code>int64</code> EA magic number. <code>Reason</code> <code>int32</code> Server-side reason code (broker-specific). <code>Comment</code> <code>string</code> User/bot comment. <code>AccountLogin</code> <code>int64</code> Account number."},{"location":"Opened_State_Snapshot/OpenedOrders/#enum-bmt5_enum_order_type","title":"Enum: <code>BMT5_ENUM_ORDER_TYPE</code>","text":"Value Name Meaning 0 <code>BMT5_ORDER_TYPE_BUY</code> Market Buy 1 <code>BMT5_ORDER_TYPE_SELL</code> Market Sell 2 <code>BMT5_ORDER_TYPE_BUY_LIMIT</code> Pending Buy Limit 3 <code>BMT5_ORDER_TYPE_SELL_LIMIT</code> Pending Sell Limit 4 <code>BMT5_ORDER_TYPE_BUY_STOP</code> Pending Buy Stop 5 <code>BMT5_ORDER_TYPE_SELL_STOP</code> Pending Sell Stop 6 <code>BMT5_ORDER_TYPE_BUY_STOP_LIMIT</code> Pending Buy Stop-Limit 7 <code>BMT5_ORDER_TYPE_SELL_STOP_LIMIT</code> Pending Sell Stop-Limit 8 <code>BMT5_ORDER_TYPE_CLOSE_BY</code> Close by opposite position"},{"location":"Opened_State_Snapshot/OpenedOrders/#enum-bmt5_enum_order_state","title":"Enum: <code>BMT5_ENUM_ORDER_STATE</code>","text":"Value Name Meaning 0 <code>BMT5_ORDER_STATE_STARTED</code> Checked, not yet accepted 1 <code>BMT5_ORDER_STATE_PLACED</code> Accepted 2 <code>BMT5_ORDER_STATE_CANCELED</code> Canceled by client 3 <code>BMT5_ORDER_STATE_PARTIAL</code> Partially filled 4 <code>BMT5_ORDER_STATE_FILLED</code> Fully executed 5 <code>BMT5_ORDER_STATE_REJECTED</code> Rejected 6 <code>BMT5_ORDER_STATE_EXPIRED</code> Expired"},{"location":"Opened_State_Snapshot/OpenedOrders/#enum-bmt5_enum_order_type_filling","title":"Enum: <code>BMT5_ENUM_ORDER_TYPE_FILLING</code>","text":"Value Name Meaning 0 <code>BMT5_ORDER_FILLING_FOK</code> Fill-or-kill 1 <code>BMT5_ORDER_FILLING_IOC</code> Immediate-or-cancel"},{"location":"Opened_State_Snapshot/OpenedOrders/#enum-bmt5_enum_order_type_time","title":"Enum: <code>BMT5_ENUM_ORDER_TYPE_TIME</code>","text":"Value Name Meaning 0 <code>BMT5_ORDER_TIME_GTC</code> Good-till-cancel 1 <code>BMT5_ORDER_TIME_DAY</code> Good-for-day 2 <code>BMT5_ORDER_TIME_SPECIFIED</code> Good-till specified timestamp 3 <code>BMT5_ORDER_TIME_SPECIFIED_DAY</code> Good-till end of specified day"},{"location":"Opened_State_Snapshot/OpenedOrders/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>One-shot snapshot of active orders + positions for dashboards and risk views.</li> <li>Basis for UIs showing order state, SL/TP, and remaining volume.</li> <li>Input for automation that reconciles positions with orders.</li> </ul>"},{"location":"Opened_State_Snapshot/OpenedOrders/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Empty <code>OpenedOrders</code> is normal when nothing is placed.</li> <li>Use <code>OpenedOrdersTickets</code> for a light-weight list of IDs when you don\u2019t need full payloads.</li> <li><code>Reason</code> is broker-dependent; don\u2019t rely on it for logic unless you map known values.</li> <li>Timestamps are server time; convert via <code>AsTime()</code> and display in user TZ if needed.</li> </ul>"},{"location":"Opened_State_Snapshot/OpenedStateSnapshot_Overview/","title":"Opened State Snapshot \u2014 Overview","text":"<p>This section groups together methods for retrieving the current trading state: open orders, their tickets, and active positions. It\u2019s perfect for building dashboards and health checks before trading.</p>"},{"location":"Opened_State_Snapshot/OpenedStateSnapshot_Overview/#methods-in-this-section","title":"\ud83d\udcc2 Methods in this Section","text":"<ul> <li> <p>OpenedOrders.md   Get a list of currently open orders (pending orders and/or active orders depending on server semantics).</p> </li> <li> <p>OpenedOrderTickets.md   Retrieve ticket IDs of open orders for later operations (modify/close/delete).</p> </li> <li> <p>ShowPositions.md   List active positions (symbol, volume, price open, current P/L, etc.).</p> </li> <li> <p>HasOpenPosition.md   Quick boolean check: is there any open position for a given symbol?</p> </li> </ul>"},{"location":"Opened_State_Snapshot/OpenedStateSnapshot_Overview/#quick-snapshot-example-readonly","title":"\ud83d\udd0e Quick Snapshot Example (read\u2011only)","text":"<pre><code>// One-shot snapshot of the current state\nsvc.ShowOpenedOrders(ctx)\nsvc.ShowOpenedOrderTickets(ctx)\nsvc.ShowPositions(ctx)\nsvc.ShowHasOpenPosition(ctx, selectedSymbol)\n</code></pre> <ul> <li>Safe to run: these methods do not execute trades.</li> <li>Use the printed tickets/positions to decide next actions (e.g., modify/close in TradingOps).</li> </ul>"},{"location":"Opened_State_Snapshot/OpenedStateSnapshot_Overview/#best-practices","title":"\u2705 Best Practices","text":"<ol> <li>Run this block before any trading action to understand the current state.</li> <li>Keep output logs \u2014 they help to find the right ticket IDs for later operations.</li> <li>Combine with quotes (from Quick Account &amp; Market Info) to see live prices next to positions.</li> <li>For real-time monitoring, use Streaming methods (tickets/profits) as a complement.</li> </ol>"},{"location":"Opened_State_Snapshot/OpenedStateSnapshot_Overview/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Build a lightweight status panel of your account.</li> <li>Prepare data (tickets/positions) for subsequent trading operations.</li> <li>Perform safe diagnostics without sending any orders.</li> </ul> <p>\ud83d\udc49 Use this overview as a map, and open each <code>.md</code> for full details and code samples.</p>"},{"location":"Opened_State_Snapshot/ShowPositions/","title":"Listing Open Positions","text":"<p>Request: fetch snapshot of all currently open positions (netted per symbol on MT5).</p>"},{"location":"Opened_State_Snapshot/ShowPositions/#code-example","title":"Code Example","text":"<pre><code>// High-level (prints selected fields per position):\nsvc.ShowPositions(ctx)\n\n// Low-level (full access to the slice):\ninfos, err := svc.account.PositionsGet(ctx)\nif err != nil {\n    log.Printf(\"\u274c PositionsGet error: %v\", err)\n    return\n}\nif len(infos) == 0 {\n    fmt.Println(\"\ud83d\udced No open positions.\")\n    return\n}\nfor _, p := range infos {\n    fmt.Printf(\"Pos #%d | %s | Volume=%.2f | Open=%.5f | Profit=%.2f\\n\",\n        p.GetTicket(), p.GetSymbol(), p.GetVolume(), p.GetPriceOpen(), p.GetProfit())\n}\n</code></pre>"},{"location":"Opened_State_Snapshot/ShowPositions/#method-signature","title":"Method Signature","text":"<pre><code>func (s *MT5Service) ShowPositions(ctx context.Context)\n</code></pre>"},{"location":"Opened_State_Snapshot/ShowPositions/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Required Description <code>ctx</code> <code>context.Context</code> yes Controls timeout/cancellation for the RPC."},{"location":"Opened_State_Snapshot/ShowPositions/#output","title":"\u2b06\ufe0f Output","text":"<p>Returns a slice of <code>PositionInfo</code> objects. <code>ShowPositions</code> prints a subset of fields per item.</p>"},{"location":"Opened_State_Snapshot/ShowPositions/#positioninfo-key-fields","title":"<code>PositionInfo</code> (key fields)","text":"Field Type Description <code>Ticket</code> <code>uint64</code> Position ticket ID. <code>Symbol</code> <code>string</code> Symbol name. <code>Type</code> <code>BMT5_ENUM_POSITION_TYPE</code> Position direction (see enum below). <code>Volume</code> <code>double</code> Net volume (lots). <code>PriceOpen</code> <code>double</code> Open price. <code>PriceCurrent</code> <code>double</code> Current market price. <code>Swap</code> <code>double</code> Accrued swap. <code>Commission</code> <code>double</code> Accrued commissions. <code>Profit</code> <code>double</code> Floating P/L. <code>StopLoss</code> <code>double</code> Stop Loss price. <code>TakeProfit</code> <code>double</code> Take Profit price. <code>TimeUpdate</code> <code>google.protobuf.Timestamp</code> Last update time. <code>MagicNumber</code> <code>int64</code> EA magic number (if any). <code>Identifier</code> <code>uint64</code> Position identifier (may match Ticket)."},{"location":"Opened_State_Snapshot/ShowPositions/#enum-bmt5_enum_position_type","title":"Enum: <code>BMT5_ENUM_POSITION_TYPE</code>","text":"Value Name Meaning 0 <code>BMT5_POSITION_TYPE_BUY</code> Long position 1 <code>BMT5_POSITION_TYPE_SELL</code> Short position"},{"location":"Opened_State_Snapshot/ShowPositions/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Show current exposure per symbol for dashboards and risk views.</li> <li>Drive position management (modify SL/TP, close, partial close in netting accounts via orders).</li> <li>Validate that expected positions exist before running automation.</li> </ul>"},{"location":"Opened_State_Snapshot/ShowPositions/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>MT5 (netting) keeps one position per symbol; multiple fills aggregate into a single net position.</li> <li>Use <code>PositionGet(ctx, symbol)</code> when you need exactly one symbol; <code>PositionsGet</code> returns all.</li> <li>For closing or modifying, you\u2019ll need either the position ticket (for <code>PositionModify</code> / <code>PositionClose</code>) or to place an opposite market order depending on broker settings.</li> </ul>"},{"location":"QuickAccount_MarketInfo/AccountSummary/","title":"Getting an Account Summary","text":"<p>Request: full account summary (<code>AccountSummaryData</code>) from MT5. Fetch all core account metrics in a single call.</p>"},{"location":"QuickAccount_MarketInfo/AccountSummary/#code-example","title":"Code Example","text":"<pre><code>// High-level (prints formatted summary):\nsvc.ShowAccountSummary(ctx)\n\n// Low-level (returns data for your own formatting):\nsummary, err := svc.account.AccountSummary(ctx)\nif err != nil {\n    log.Printf(\"\u274c AccountSummary error: %v\", err)\n    return\n}\nfmt.Printf(\"Account Summary: Balance=%.2f, Equity=%.2f, Currency=%s\\n\",\n    summary.GetAccountBalance(),\n    summary.GetAccountEquity(),\n    summary.GetAccountCurrency())\n</code></pre>"},{"location":"QuickAccount_MarketInfo/AccountSummary/#method-signature","title":"Method Signature","text":"<pre><code>func (s *MT5Service) ShowAccountSummary(ctx context.Context)\n</code></pre>"},{"location":"QuickAccount_MarketInfo/AccountSummary/#input","title":"\ud83d\udd3d Input","text":"<p>No required input parameters.</p> Parameter Type Description <code>ctx</code> <code>context.Context</code> Controls timeout/cancellation for the RPC"},{"location":"QuickAccount_MarketInfo/AccountSummary/#output","title":"\u2b06\ufe0f Output","text":"<p><code>ShowAccountSummary</code> prints selected fields from <code>AccountSummaryData</code> to stdout. If you use the low-level call, you get a struct with at least:</p> Field Type Description <code>AccountBalance</code> <code>double</code> Balance excluding floating P/L <code>AccountEquity</code> <code>double</code> Equity = balance + floating P/L <code>AccountMargin</code> <code>double</code> Currently used margin <code>AccountFreeMargin</code> <code>double</code> Free margin available for new trades <code>AccountCurrency</code> <code>string</code> Deposit currency (e.g., <code>\"USD\"</code>, <code>\"EUR\"</code>) <code>AccountLeverage</code> <code>int</code> Account leverage (e.g., 100 for 1:100) <code>AccountName</code> <code>string</code> Account holder/broker display name <code>AccountNumber</code> <code>int</code> Trading account login ID <code>Company</code> <code>string</code> Broker/company name <p>Exact field names may differ slightly by proto version; use getters provided by your <code>pb</code> package.</p>"},{"location":"QuickAccount_MarketInfo/AccountSummary/#purpose","title":"\ud83c\udfaf Purpose","text":"<p>Use this to display real-time account state and to sanity-check connectivity. Typical cases:</p> <ul> <li>Show dashboard/CLI status</li> <li>Verify free margin and equity before placing trades</li> <li>Monitor account health/exposure in bots and diagnostics</li> </ul>"},{"location":"QuickAccount_MarketInfo/AccountSummary/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Call after the terminal is connected and \u201calive\u201d; otherwise you\u2019ll get an error or zeroed values.</li> <li>Wrap in a short per-call timeout (e.g., 3\u20135s) if running inside longer workflows.</li> <li>Values reflect the terminal\u2019s current state; if symbols/positions are loading, re-check after a brief delay.</li> </ul>"},{"location":"QuickAccount_MarketInfo/AllSymbols/","title":"Listing All Symbols","text":"<p>Request: fetch the full list of symbols available to the connected account/broker.</p>"},{"location":"QuickAccount_MarketInfo/AllSymbols/#code-example","title":"Code Example","text":"<pre><code>// High-level (prints one per line):\nsvc.ShowAllSymbols(ctx)\n\n// Low-level (work with the slice yourself):\nnames, err := svc.account.ShowAllSymbols(ctx)\nif err != nil {\n    log.Printf(\"\u274c ShowAllSymbols error: %v\", err)\n    return\n}\nfor _, name := range names {\n    fmt.Println(name)\n}\n</code></pre>"},{"location":"QuickAccount_MarketInfo/AllSymbols/#method-signature","title":"Method Signature","text":"<pre><code>func (s *MT5Service) ShowAllSymbols(ctx context.Context)\n</code></pre>"},{"location":"QuickAccount_MarketInfo/AllSymbols/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Required Description <code>ctx</code> <code>context.Context</code> yes Controls timeout/cancellation for the RPC"},{"location":"QuickAccount_MarketInfo/AllSymbols/#output","title":"\u2b06\ufe0f Output","text":"<p>Returns a slice of symbol names and, in the high-level helper, prints them to stdout.</p> Item Type Description <code>names[i]</code> <code>string</code> Symbol name (e.g., <code>\"EURUSD\"</code>, <code>\"XAUUSD\"</code>)."},{"location":"QuickAccount_MarketInfo/AllSymbols/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Discover what instruments are tradable on the current server/account.</li> <li>Feed watchlists, dropdowns, and auto-complete in UIs/CLIs.</li> <li>Validate a symbol before attempting <code>EnsureSymbolVisible</code>, <code>Quote</code>, or order placement.</li> </ul>"},{"location":"QuickAccount_MarketInfo/AllSymbols/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>The list may be large (hundreds/thousands). Consider filtering (prefixes, groups) on your side.</li> <li>Not every symbol from this list is guaranteed to be visible in Market Watch. Use <code>EnsureSymbolVisible(ctx, symbol)</code> before requesting ticks/orders.</li> <li>Names are broker-defined; suffixes like <code>.pro</code>, <code>.mini</code>, <code>.ecn</code> are common. Use your own suffix probing when selecting a default symbol.</li> <li>If you iterate this list and call per-symbol RPCs, add short per-call timeouts to avoid long runs.</li> </ul>"},{"location":"QuickAccount_MarketInfo/MarketInfo_Overview/","title":"Quick Account &amp; Market Info \u2014 Overview","text":"<p>This section contains fast-access methods for retrieving account snapshots and market symbol information. These functions are useful for building dashboards, performing quick checks, and fetching basic trading data.</p>"},{"location":"QuickAccount_MarketInfo/MarketInfo_Overview/#methods-in-this-section","title":"\ud83d\udcc2 Methods in this Section","text":"<ul> <li> <p>AccountSummary.md   Get a quick summary of the trading account (balance, equity, margin, free margin).</p> </li> <li> <p>AllSymbols.md   Retrieve a list of all available trading symbols in the terminal.</p> </li> <li> <p>Quote.md   Get a single latest quote (bid/ask/last) for a chosen symbol.</p> </li> <li> <p>QuotesMany.md   Retrieve quotes for multiple symbols at once.</p> </li> <li> <p>SymbolParams.md   Fetch detailed parameters for a specific symbol (spread, digits, trade mode, etc.).</p> </li> <li> <p>TickValues.md   Get tick size and tick value for a symbol \u2014 useful for pip-value calculations.</p> </li> </ul>"},{"location":"QuickAccount_MarketInfo/MarketInfo_Overview/#example-usage","title":"\u26a1 Example Usage","text":"<pre><code>// Get account summary\nsummary, _ := svc.AccountSummary(ctx)\n\n// Fetch one symbol quote\nquote, _ := svc.Quote(ctx, \"EURUSD\")\n\n// Fetch multiple quotes\nquotes, _ := svc.QuotesMany(ctx, []string{\"EURUSD\", \"GBPUSD\", \"USDJPY\"})\n\n// Get symbol parameters\nparams, _ := svc.SymbolParams(ctx, \"EURUSD\")\n</code></pre>"},{"location":"QuickAccount_MarketInfo/MarketInfo_Overview/#best-practices","title":"\u2705 Best Practices","text":"<ol> <li>Use <code>AccountSummary</code> for quick UI dashboards (instead of full account info calls).</li> <li>Call <code>AllSymbols</code> once and cache results \u2014 avoid fetching repeatedly.</li> <li>Use <code>QuotesMany</code> if you monitor multiple pairs to reduce API calls.</li> <li>For pip value calculations, always rely on <code>TickValues</code>.</li> <li>Combine <code>SymbolParams</code> with <code>Quote</code> to validate trade conditions.</li> </ol>"},{"location":"QuickAccount_MarketInfo/MarketInfo_Overview/#purpose","title":"\ud83c\udfaf Purpose","text":"<p>The methods in this block allow you to:</p> <ul> <li>Build quick account snapshots (balance/equity widgets).</li> <li>Show real-time quotes in dashboards.</li> <li>Perform risk calculations (pip value, spread, leverage impact).</li> <li>Verify symbol trade settings before sending orders.</li> </ul> <p>\ud83d\udc49 Use this overview as a map, and jump into each <code>.md</code> file for detailed method documentation.</p>"},{"location":"QuickAccount_MarketInfo/Quote/","title":"Getting a Quote","text":"<p>Request: latest tick for a symbol (Bid/Ask/Last &amp; timestamp). Fetch a single quote snapshot for one symbol.</p>"},{"location":"QuickAccount_MarketInfo/Quote/#code-example","title":"Code Example","text":"<pre><code>// High-level (prints formatted quote):\nsvc.ShowQuote(ctx, \"EURUSD\")\n\n// Low-level (for custom handling):\nq, err := svc.account.Quote(ctx, \"EURUSD\")\nif err != nil {\n    log.Printf(\"\u274c Quote error: %v\", err)\n    return\n}\nif st := q.GetSymbolTick(); st != nil {\n    fmt.Printf(\"%s | Bid=%.5f | Ask=%.5f | Time=%s\\n\",\n        st.GetSymbol(), st.GetBid(), st.GetAsk(), st.GetTime().AsTime().Format(\"2006-01-02 15:04:05\"))\n}\n</code></pre>"},{"location":"QuickAccount_MarketInfo/Quote/#method-signature","title":"Method Signature","text":"<pre><code>func (s *MT5Service) ShowQuote(ctx context.Context, symbol string)\n</code></pre>"},{"location":"QuickAccount_MarketInfo/Quote/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Required Description <code>ctx</code> <code>context.Context</code> yes Controls timeout/cancellation for the RPC. <code>symbol</code> <code>string</code> yes Trading symbol name (e.g., <code>\"EURUSD\"</code>)."},{"location":"QuickAccount_MarketInfo/Quote/#output","title":"\u2b06\ufe0f Output","text":"<p><code>ShowQuote</code> prints selected fields from <code>MrpcSubscriptionMqlTick</code> (tick snapshot):</p> Field Type Description <code>Time</code> <code>google.protobuf.Timestamp</code> Time of the last prices update (server time). <code>Bid</code> <code>double</code> Current Bid price. <code>Ask</code> <code>double</code> Current Ask price. <code>Last</code> <code>double</code> Price of the last deal (Last). <code>Volume</code> <code>uint64</code> Volume for the current Last price. <code>TimeMsc</code> <code>int64</code> Time of the last update in milliseconds. <code>Flags</code> <code>uint32</code> Tick flags (bitmask; specific semantics are terminal-dependent). <code>VolumeReal</code> <code>double</code> More precise volume for the current Last price. <code>Symbol</code> <code>string</code> Symbol name (e.g., <code>\"EURUSD\"</code>). <p>Structure name and fields come from generated Go types (<code>mt5-term-api-subscriptions.pb.go</code>: <code>MrpcSubscriptionMqlTick</code>).</p>"},{"location":"QuickAccount_MarketInfo/Quote/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Grab a current snapshot for UI/CLI display.</li> <li>Validate symbol availability &amp; connectivity.</li> <li>Pre-check pricing before <code>OrderCheck</code> / <code>OrderSend</code>.</li> </ul>"},{"location":"QuickAccount_MarketInfo/Quote/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Ensure the symbol is visible/selected before requesting quotes; otherwise the terminal may return empty data or error.</li> <li>The timestamp is provided both as <code>Time</code> (seconds) and <code>TimeMsc</code> (milliseconds). Prefer <code>Time</code> and format via <code>AsTime()</code>.</li> <li>For continuous updates, use streaming (<code>OnSymbolTick</code>) instead of repeated single <code>Quote</code> calls.</li> </ul>"},{"location":"QuickAccount_MarketInfo/QuotesMany/","title":"Getting Multiple Quotes","text":"<p>Request: fetch latest ticks for several symbols at once.</p>"},{"location":"QuickAccount_MarketInfo/QuotesMany/#code-example","title":"Code Example","text":"<pre><code>// High-level (prints formatted quotes):\nsvc.ShowQuotesMany(ctx, []string{\"EURUSD\", \"GBPUSD\"})\n\n// Low-level (handle the payload yourself):\nsymbols := []string{\"EURUSD\", \"GBPUSD\"}\nqs, err := svc.account.QuoteMany(ctx, symbols)\nif err != nil {\n    log.Printf(\"\u274c QuoteMany error: %v\", err)\n    return\n}\nfor _, q := range qs {\n    if st := q.GetSymbolTick(); st != nil {\n        fmt.Printf(\"%s | Bid=%.5f | Ask=%.5f | Time=%s\\n\",\n            st.GetSymbol(), st.GetBid(), st.GetAsk(), st.GetTime().AsTime().Format(\"2006-01-02 15:04:05\"))\n    }\n}\n</code></pre>"},{"location":"QuickAccount_MarketInfo/QuotesMany/#method-signature","title":"Method Signature","text":"<pre><code>func (s *MT5Service) ShowQuotesMany(ctx context.Context, symbols []string)\n</code></pre>"},{"location":"QuickAccount_MarketInfo/QuotesMany/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Required Description <code>ctx</code> <code>context.Context</code> yes Controls timeout/cancellation for the RPC. <code>symbols</code> <code>[]string</code> yes List of trading symbols (e.g., <code>{\"EURUSD\",\"GBPUSD\"}</code>). <p>Rules &amp; notes</p> <ul> <li>Empty list \u2192 likely returns an error (don\u2019t call with <code>nil</code>/empty).</li> <li>Ensure each symbol is visible/allowed by broker to avoid empty ticks.</li> </ul>"},{"location":"QuickAccount_MarketInfo/QuotesMany/#output","title":"\u2b06\ufe0f Output","text":"<p>Returns a slice where each element holds a tick snapshot (<code>MrpcSubscriptionMqlTick</code>) for a symbol. <code>ShowQuotesMany</code> prints selected fields from each tick.</p> <p>Tick fields (per item):</p> Field Type Description <code>Symbol</code> <code>string</code> Symbol name (e.g., <code>\"EURUSD\"</code>). <code>Bid</code> <code>double</code> Current Bid price. <code>Ask</code> <code>double</code> Current Ask price. <code>Last</code> <code>double</code> Price of the last deal (Last). <code>Volume</code> <code>uint64</code> Volume at <code>Last</code>. <code>Time</code> <code>google.protobuf.Timestamp</code> Last update time (server). <code>TimeMsc</code> <code>int64</code> Last update time in milliseconds. <code>Flags</code> <code>uint32</code> Tick flags (bitmask; terminal-dependent semantics). <code>VolumeReal</code> <code>double</code> Precise volume at <code>Last</code>. <p>The exact container type is the same as in <code>Quote</code>: it exposes <code>GetSymbolTick()</code> returning <code>MrpcSubscriptionMqlTick</code>.</p>"},{"location":"QuickAccount_MarketInfo/QuotesMany/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Fetch several snapshots in one call for dashboards/CLI.</li> <li>Pre-load pricing for a watchlist before validation or order checks.</li> <li>Reduce call overhead versus multiple single-symbol <code>Quote</code> calls.</li> </ul>"},{"location":"QuickAccount_MarketInfo/QuotesMany/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>If some symbols are unknown or hidden, those items may be missing or empty \u2014 validate <code>GetSymbolTick() != nil</code>.</li> <li>For continuous updates across a basket, consider streaming (<code>OnSymbolTick</code>) instead of polling.</li> <li>Keep your list short (dozens, not hundreds) to avoid broker-side throttling or slow responses.</li> </ul>"},{"location":"QuickAccount_MarketInfo/SymbolParams/","title":"Getting Symbol Parameters","text":"<p>Request: fetch detailed symbol metadata and live attributes.</p>"},{"location":"QuickAccount_MarketInfo/SymbolParams/#code-example","title":"Code Example","text":"<pre><code>// High-level (prints selected attributes):\nsvc.ShowSymbolParams(ctx, \"EURUSD\")\n\n// Low-level (access full struct):\ninfo, err := svc.account.SymbolParams(ctx, \"EURUSD\")\nif err != nil {\n    log.Printf(\"\u274c SymbolParams error: %v\", err)\n    return\n}\nfmt.Println(\"Symbol:\", info.GetName())\nfmt.Println(\"Description:\", info.GetSymDescription())\nfmt.Printf(\"Digits: %d\\n\", info.GetDigits())\nfmt.Printf(\"Volume Min/Max/Step: %.2f / %.2f / %.2f\\n\", info.GetVolumeMin(), info.GetVolumeMax(), info.GetVolumeStep())\nfmt.Println(\"Trade Mode:\", info.GetTradeMode())\nfmt.Printf(\"Currencies: base=%s profit=%s margin=%s\\n\", info.GetCurrencyBase(), info.GetCurrencyProfit(), info.GetCurrencyMargin())\n</code></pre>"},{"location":"QuickAccount_MarketInfo/SymbolParams/#method-signature","title":"Method Signature","text":"<pre><code>func (s *MT5Service) ShowSymbolParams(ctx context.Context, symbol string)\n</code></pre>"},{"location":"QuickAccount_MarketInfo/SymbolParams/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Required Description <code>ctx</code> <code>context.Context</code> yes Controls timeout/cancellation for the RPC. <code>symbol</code> <code>string</code> yes Trading symbol name (e.g., <code>\"EURUSD\"</code>)."},{"location":"QuickAccount_MarketInfo/SymbolParams/#output","title":"\u2b06\ufe0f Output","text":"<p>Returns a <code>SymbolParameters</code> struct with extensive fields; <code>ShowSymbolParams</code> prints a subset.</p>"},{"location":"QuickAccount_MarketInfo/SymbolParams/#commonly-used-fields","title":"Commonly used fields","text":"Field Type Description <code>Name</code> <code>string</code> Symbol name. <code>SymDescription</code> <code>string</code> Human-readable description. <code>Digits</code> <code>int32</code> Number of digits (price precision). <code>VolumeMin</code> <code>float64</code> Minimum lot size. <code>VolumeMax</code> <code>float64</code> Maximum lot size. <code>VolumeStep</code> <code>float64</code> Lot step. <code>TradeMode</code> <code>BMT5_ENUM_SYMBOL_TRADE_MODE</code> Trading availability mode (see enum below). <code>CurrencyBase</code> <code>string</code> Base currency. <code>CurrencyProfit</code> <code>string</code> Profit currency. <code>CurrencyMargin</code> <code>string</code> Margin currency."},{"location":"QuickAccount_MarketInfo/SymbolParams/#enum-bmt5_enum_symbol_trade_mode","title":"Enum: <code>BMT5_ENUM_SYMBOL_TRADE_MODE</code>","text":"Value Name Meaning 0 <code>BMT5_SYMBOL_TRADE_MODE_DISABLED</code> Trade disabled for this symbol. 1 <code>BMT5_SYMBOL_TRADE_MODE_LONGONLY</code> Only long positions allowed. 2 <code>BMT5_SYMBOL_TRADE_MODE_SHORTONLY</code> Only short positions allowed. 3 <code>BMT5_SYMBOL_TRADE_MODE_CLOSEONLY</code> Only closing positions is allowed. 4 <code>BMT5_SYMBOL_TRADE_MODE_FULL</code> No restrictions (full trading). <p>Enum source: generated <code>pb</code> (account-helper).</p>"},{"location":"QuickAccount_MarketInfo/SymbolParams/#full-field-inventory-symbolparameters","title":"\ud83d\udce6 Full field inventory (SymbolParameters)","text":"<p>Below is the complete list of fields exposed by <code>SymbolParameters</code> (names and Go types). Use getters with the same names prefixed by <code>Get</code> in your code (e.g., <code>GetDigits()</code>).</p> Field Go Type JSON tag <code>Name</code> <code>string</code> <code>name,omitempty</code> <code>Bid</code> <code>float64</code> <code>bid,omitempty</code> <code>BidHigh</code> <code>float64</code> <code>bid_high,omitempty</code> <code>BidLow</code> <code>float64</code> <code>bid_low,omitempty</code> <code>Ask</code> <code>float64</code> <code>ask,omitempty</code> <code>AskHigh</code> <code>float64</code> <code>ask_high,omitempty</code> <code>AskLow</code> <code>float64</code> <code>ask_low,omitempty</code> <code>Last</code> <code>float64</code> <code>last,omitempty</code> <code>LastHigh</code> <code>float64</code> <code>last_high,omitempty</code> <code>LastLow</code> <code>float64</code> <code>last_low,omitempty</code> <code>VolumeMin</code> <code>float64</code> <code>volume_min,omitempty</code> <code>VolumeMax</code> <code>float64</code> <code>volume_max,omitempty</code> <code>VolumeStep</code> <code>float64</code> <code>volume_step,omitempty</code> <code>Digits</code> <code>int32</code> <code>digits,omitempty</code> <code>TradeMode</code> <code>BMT5_ENUM_SYMBOL_TRADE_MODE</code> <code>trade_mode,omitempty</code> <code>CurrencyBase</code> <code>string</code> <code>currency_base,omitempty</code> <code>CurrencyProfit</code> <code>string</code> <code>currency_profit,omitempty</code> <code>CurrencyMargin</code> <code>string</code> <code>currency_margin,omitempty</code> <code>SymDescription</code> <code>string</code> <code>sym_description,omitempty</code> The struct contains 111 fields in total (pricing, sessions, swaps, margin/contract, sector/industry, options, etc.)."},{"location":"QuickAccount_MarketInfo/SymbolParams/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Introspect tradability, precision, and lot constraints before placing orders.</li> <li>Show instrument metadata in dashboards.</li> <li>Determine currencies used for P/L and margin calculations.</li> </ul>"},{"location":"QuickAccount_MarketInfo/SymbolParams/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Some fields are dynamic (Bid/Ask/Last, session stats) and reflect current tick; others are static metadata (digits, contract size).</li> <li><code>TradeMode</code> reflects broker-side permissions and may differ by account type.</li> <li>If you query many symbols at once, consider <code>SymbolParamsMany</code> for pagination.</li> </ul>"},{"location":"QuickAccount_MarketInfo/TickValues/","title":"Getting Tick Value / Tick Size / Contract Size","text":"<p>Request: fetch monetary tick value, tick size (price step), and contract size for one or more symbols.</p>"},{"location":"QuickAccount_MarketInfo/TickValues/#code-example","title":"Code Example","text":"<pre><code>// High-level (prints selected fields):\nsvc.ShowTickValues(ctx, []string{\"EURUSD\", \"GBPUSD\"})\n\n// Low-level (work with the payload directly):\ndata, err := svc.account.TickValueWithSize(ctx, []string{\"EURUSD\", \"GBPUSD\"})\nif err != nil {\n    log.Printf(\"\u274c TickValueWithSize error: %v\", err)\n    return\n}\nfor _, info := range data.GetSymbolTickSizeInfos() {\n    fmt.Printf(\"%s | TickValue=%.5f | TickSize=%.5f | ContractSize=%.2f\\n\",\n        info.GetName(), info.GetTradeTickValue(), info.GetTradeTickSize(), info.GetTradeContractSize())\n}\n</code></pre>"},{"location":"QuickAccount_MarketInfo/TickValues/#method-signature","title":"Method Signature","text":"<pre><code>func (s *MT5Service) ShowTickValues(ctx context.Context, symbols []string)\n</code></pre>"},{"location":"QuickAccount_MarketInfo/TickValues/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Required Description <code>ctx</code> <code>context.Context</code> yes Controls timeout/cancellation for the RPC. <code>symbols</code> <code>[]string</code> yes List of symbol names, e.g., <code>{\"EURUSD\",\"GBPUSD\"}</code>. <p>Rules &amp; notes</p> <ul> <li>Symbols should be visible/enabled at the terminal/broker.</li> <li>Empty slice likely results in an error or empty payload.</li> </ul>"},{"location":"QuickAccount_MarketInfo/TickValues/#output","title":"\u2b06\ufe0f Output","text":"<p>Returns a struct containing an array of <code>SymbolTickSizeInfo</code> objects. <code>ShowTickValues</code> prints the following fields per symbol:</p> Field Type Description <code>Name</code> <code>string</code> Symbol name. <code>TradeTickValue</code> <code>double</code> Monetary value of one price tick in account currency. <code>TradeTickSize</code> <code>double</code> Price step (minimum price increment) for the symbol. <code>TradeContractSize</code> <code>double</code> Contract size used for calculations (e.g., 100,000 for many FX symbols). <p>Exact field names are taken from generated getters (<code>GetName</code>, <code>GetTradeTickValue</code>, <code>GetTradeTickSize</code>, <code>GetTradeContractSize</code>).</p>"},{"location":"QuickAccount_MarketInfo/TickValues/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Convert price movements into money (e.g., P/L per tick for position sizing).</li> <li>Validate lot sizing and risk before sending orders.</li> <li>Display instrument math in dashboards.</li> </ul>"},{"location":"QuickAccount_MarketInfo/TickValues/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li><code>TradeTickValue</code> is expressed in account currency; ensure this matches what you expect when mixing instruments.</li> <li>Some brokers define non-standard contract sizes (indices, commodities) \u2014 always read from this API, don\u2019t hardcode.</li> <li>Pair with <code>SymbolParams</code> (digits, volume step) to compute P/L per pip and validate order quantities.</li> </ul>"},{"location":"Stream/StreamOpenedOrderProfits/","title":"Streaming Opened Order Profits \u2014 Proto\u2011Accurate Guide","text":"<p>Goal: Subscribe to real\u2011time P/L updates for open positions/orders without polling. Proto path: <code>OnPositionProfit</code> \u2192 <code>OnPositionProfitReply</code> \u2192 <code>OnPositionProfitData</code></p>"},{"location":"Stream/StreamOpenedOrderProfits/#quick-start-highlevel","title":"\u2705 Quick Start (High\u2011Level)","text":"<pre><code>// Recommended: use the service helper\nsvc.StreamOpenedOrderProfits(ctx)\n</code></pre>"},{"location":"Stream/StreamOpenedOrderProfits/#lowlevel-example-full-control","title":"\ud83d\udd27 Low\u2011Level Example (Full Control)","text":"<pre><code>// 1) Create a cancellable child context for the stream lifetime\nctx2, cancel := context.WithCancel(ctx)\ndefer cancel()\n\n// 2) Subscribe (wrapper around OnPositionProfit)\nreplyCh, errCh := svc.account.OnOpenedOrdersProfit(ctx2, 1000) // buffer=1000 is a safe demo default\nfmt.Println(\"\ud83d\udd04 Streaming order profits...\")\n\n// 3) Consume packets\nfor {\n    select {\n    case reply, ok := &lt;-replyCh:\n        if !ok { fmt.Println(\"\u2705 Profit stream ended.\"); return }\n\n        data := reply.GetData() // OnPositionProfitData\n        if data == nil { continue }\n\n        // The stream delivers \u0394-changes split into 3 groups\n        for _, info := range data.GetNewPositions() {\n            fmt.Printf(\"[Profit|NEW] Ticket:%d | Symbol:%s | Profit:%.2f\\n\",\n                info.GetTicket(), info.GetPositionSymbol(), info.GetProfit())\n        }\n        for _, info := range data.GetUpdatedPositions() {\n            fmt.Printf(\"[Profit|UPD] Ticket:%d | Symbol:%s | Profit:%.2f\\n\",\n                info.GetTicket(), info.GetPositionSymbol(), info.GetProfit())\n        }\n        for _, info := range data.GetDeletedPositions() {\n            fmt.Printf(\"[Profit|DEL] Ticket:%d | Symbol:%s | Profit:%.2f\\n\",\n                info.GetTicket(), info.GetPositionSymbol(), info.GetProfit())\n        }\n\n        if acc := data.GetAccountInfo(); acc != nil {\n            // Optional account snapshot: Balance, Equity, Margin, FreeMargin, Profit, etc.\n            _ = acc // use in dashboards if needed\n        }\n\n    case err := &lt;-errCh:\n        log.Printf(\"\u274c Stream error: %v\", err)\n        return\n\n    case &lt;-time.After(30 * time.Second): // demo safety timeout; remove in production\n        fmt.Println(\"\u23f1\ufe0f Timeout reached.\")\n        return\n    }\n}\n</code></pre>"},{"location":"Stream/StreamOpenedOrderProfits/#method-signature-helper","title":"\ud83e\uddfe Method Signature (Helper)","text":"<pre><code>func (s *MT5Service) StreamOpenedOrderProfits(ctx context.Context)\n</code></pre> <p>Underlying gRPC (per bindings):</p> <ul> <li>Request/stream: <code>OnPositionProfit(ctx)</code></li> <li>Envelope: <code>OnPositionProfitReply</code></li> <li>Payload: <code>OnPositionProfitData</code></li> </ul> <p>Your wrapper may expose: <code>OnOpenedOrdersProfit(ctx context.Context, buffer int) (&lt;-chan *pb.OnPositionProfitReply, &lt;-chan error)</code></p>"},{"location":"Stream/StreamOpenedOrderProfits/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Required Description <code>ctx</code> <code>context.Context</code> yes Controls stream lifetime (cancel/timeout). <code>buffer</code> <code>int</code> no Suggested channel buffer; examples use <code>1000</code>."},{"location":"Stream/StreamOpenedOrderProfits/#output-packet-schema","title":"\u2b06\ufe0f Output (Packet Schema)","text":"<p><code>OnPositionProfitData</code> fields:</p> Field Type Purpose <code>NewPositions</code> <code>[]*OnPositionProfitPositionInfo</code> Positions that appeared since last packet. <code>UpdatedPositions</code> <code>[]*OnPositionProfitPositionInfo</code> Existing positions whose profit/fields changed. <code>DeletedPositions</code> <code>[]*OnPositionProfitPositionInfo</code> Positions that were closed/removed. <code>AccountInfo</code> <code>*OnEventAccountInfo</code> Optional account snapshot (Balance/Equity/Margin/FreeMargin/Profit). <code>TerminalInstanceGuidId</code> <code>string</code> Terminal instance identifier. <p><code>OnPositionProfitPositionInfo</code> (exact fields):</p> <ul> <li><code>Index</code> (<code>int32</code>)</li> <li><code>Ticket</code> (<code>int64</code>)  \u2190 use <code>int64</code> as the cache key</li> <li><code>Profit</code> (<code>float64</code>)</li> <li><code>PositionSymbol</code> (<code>string</code>)</li> </ul>"},{"location":"Stream/StreamOpenedOrderProfits/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Build live P/L widgets per position or per symbol.</li> <li>Trigger alerts/rules (e.g., TP runner, trailing, drawdown guard).</li> <li>Maintain a push\u2011based cache of open exposure without polling.</li> </ul>"},{"location":"Stream/StreamOpenedOrderProfits/#best-practices","title":"\u2705 Best Practices","text":"<ol> <li>Keep an in\u2011memory map: <code>map[int64]OnPositionProfitPositionInfo</code> keyed by <code>Ticket</code>.</li> <li>Apply <code>DeletedPositions</code> to evict finished tickets from the cache/UI.</li> <li>Throttle or aggregate logs \u2014 profit updates they come often.</li> <li>Use a parent context; stop streams on shutdown (Ctrl+C) or service restarts.</li> <li>Implement reconnect/backoff in long\u2011running daemons.</li> </ol>"},{"location":"Stream/StreamOpenedOrderProfits/#pitfalls","title":"\u26a0\ufe0f Pitfalls","text":"<ul> <li>Backpressure: heavy work in the select loop blocks the channel \u2192 offload to workers.</li> <li>UI spam: printing every update floods stdout; sample, batch, or rate\u2011limit.</li> <li>Field assumptions: rely only on fields confirmed in your bindings.</li> </ul>"},{"location":"Stream/StreamOpenedOrderProfits/#variations","title":"\ud83d\udd00 Variations","text":"<ul> <li>Always\u2011on service: remove demo timeout; wrap in a retry loop with backoff.</li> <li>Filtering: ignore updates for symbols not in your watchlist.</li> <li>Alerting: threshold checks on <code>Profit</code> (e.g., &gt; X or &lt; \u2013Y) \u2192 notify or act.</li> </ul>"},{"location":"Stream/StreamOpenedOrderProfits/#sample-output","title":"\ud83e\uddea Sample Output","text":"<pre><code>\ud83d\udd04 Streaming order profits...\n[Profit|NEW] Ticket: 12345678 | Symbol: EURUSD | Profit: 1.25\n[Profit|UPD] Ticket: 12345678 | Symbol: EURUSD | Profit: 3.90\n[Profit|DEL] Ticket: 12345678 | Symbol: EURUSD | Profit: 4.10\n\u2705 Profit stream ended.\n</code></pre>"},{"location":"Stream/StreamOpenedOrderTickets/","title":"StreamOpenedOrderTickets \u2014 Proto-Accurate Guide","text":"<p>This streaming method provides a live feed of all open order tickets (both positions and pending orders). It is useful for continuously tracking what is currently open in the account without polling.</p>"},{"location":"Stream/StreamOpenedOrderTickets/#method-signature","title":"\ud83d\udccc Method Signature","text":"<pre><code>func (s *MT5Service) StreamOpenedOrderTickets(ctx context.Context)\n</code></pre> <p>Internally calls:</p> <pre><code>ticketCh, errCh := s.account.OnOpenedOrdersTickets(ctx, depth)\n</code></pre> <p>Where:</p> <ul> <li><code>depth</code> \u2192 maximum number of tickets to fetch in one update (e.g., 1000).</li> </ul>"},{"location":"Stream/StreamOpenedOrderTickets/#streamed-messages","title":"\ud83d\udce9 Streamed Messages","text":"<p>The channel delivers objects of type:</p> <pre><code>message OpenedOrdersTicketsPacket {\n  repeated uint64 position_tickets     = 1; // active positions\n  repeated uint64 pending_order_tickets = 2; // active pending orders\n}\n</code></pre> <p>In Go binding:</p> <pre><code>pkt.GetPositionTickets()       // []uint64\npkt.GetPendingOrderTickets()   // []uint64\n</code></pre> <p>Combined usage:</p> <pre><code>tix := append(pkt.GetPositionTickets(), pkt.GetPendingOrderTickets()...)\n</code></pre>"},{"location":"Stream/StreamOpenedOrderTickets/#example-usage","title":"\ud83d\udd27 Example Usage","text":"<pre><code>ctx2, cancel := context.WithCancel(ctx)\ndefer cancel()\n\nticketCh, errCh := s.account.OnOpenedOrdersTickets(ctx2, 1000)\nfmt.Println(\"\ud83d\udd04 Streaming opened order tickets...\")\n\nfor {\n    select {\n    case pkt, ok := &lt;-ticketCh:\n        if !ok {\n            fmt.Println(\"\u2705 Ticket stream ended.\")\n            return\n        }\n        tix := append(pkt.GetPositionTickets(), pkt.GetPendingOrderTickets()...)\n        fmt.Printf(\"[Tickets] %d open tickets: %v\\n\", len(tix), tix)\n\n    case err := &lt;-errCh:\n        log.Printf(\"\u274c Stream error: %v\", err)\n        return\n\n    case &lt;-time.After(30 * time.Second):\n        fmt.Println(\"\u23f1\ufe0f Timeout reached.\")\n        return\n    }\n}\n</code></pre>"},{"location":"Stream/StreamOpenedOrderTickets/#best-practices","title":"\u2705 Best Practices","text":"<ol> <li>Depth parameter: keep reasonably high (e.g., 1000) unless broker imposes stricter limits.</li> <li>Always combine <code>PositionTickets</code> + <code>PendingOrderTickets</code> if you want the full picture.</li> <li>Use context cancellation to stop streaming when shutting down gracefully.</li> <li>Expect frequent updates even when no new orders are opened \u2014 MT5 terminal may push heartbeats.</li> </ol>"},{"location":"Stream/StreamOpenedOrderTickets/#pitfalls","title":"\u26a0\ufe0f Pitfalls","text":"<ul> <li>Duplicate tickets: You may see the same ticket in multiple updates \u2014 always de-duplicate if building persistent state.</li> <li>Ticket gaps: Brokers may reuse ticket IDs after a long time \u2014 don\u2019t assume monotonic increments.</li> <li>Depth limit: If open orders exceed your <code>depth</code>, some will be dropped from the stream. Handle accordingly.</li> <li>Stream ending: Channel closure means either disconnect or terminal shutdown \u2014 always be ready to reconnect.</li> </ul>"},{"location":"Stream/StreamOpenedOrderTickets/#use-cases","title":"\ud83c\udfaf Use Cases","text":"<ul> <li>Monitor in real-time how many positions/pending orders are open.</li> <li>Feed into a dashboard showing open exposure.</li> <li>Use as a trigger source: e.g., if no open tickets remain, flatten internal strategy state.</li> </ul> <p>\ud83d\udc49 This stream is purely read-only. No orders are created/modified \u2014 safe to run continuously.</p>"},{"location":"Stream/StreamTradeUpdates/","title":"StreamTradeUpdates \u2014 Proto\u2011Accurate Guide","text":"<p>Subscribe to real\u2011time trade events: newly created orders, disappeared orders, state changes, and (optionally) historical updates emitted by the terminal.</p> <p>Proto path: <code>OnTrade</code> \u2192 <code>OnTradeReply</code> \u2192 <code>OnTradeData</code> <code>OnTradeData.EventData</code> type name in bindings: <code>OnTadeEventData</code> (intentional proto typo)</p>"},{"location":"Stream/StreamTradeUpdates/#quick-start-highlevel","title":"\u2705 Quick Start (High\u2011Level)","text":"<pre><code>// One\u2011liner helper\nsvc.StreamTradeUpdates(ctx)\n</code></pre>"},{"location":"Stream/StreamTradeUpdates/#lowlevel-example-full-control","title":"\ud83d\udd27 Low\u2011Level Example (Full Control)","text":"<pre><code>// 1) Use a child context to control stream lifetime\nctx2, cancel := context.WithCancel(ctx)\ndefer cancel()\n\n// 2) Subscribe to trade events\ntradeCh, errCh := svc.account.OnTrade(ctx2)\nfmt.Println(\"\ud83d\udd04 Streaming trade updates...\")\n\n// 3) Consume replies\nfor {\n    select {\n    case reply, ok := &lt;-tradeCh:\n        if !ok { fmt.Println(\"\u2705 Trade stream ended.\"); return }\n\n        data := reply.GetOnTradeData() // or GetData() depending on your wrapper\n        if data == nil { continue }\n\n        // (a) Realtime event groups (OnTadeEventData)\n        if ev := data.GetEventData(); ev != nil {\n            for _, o := range ev.GetNewOrders() {\n                fmt.Printf(\"[Trade|NEW]  Ticket:%d Symbol:%s Type:%v Volume:%.2f\\n\",\n                    o.GetTicket(), o.GetSymbol(), o.GetOrderType(), o.GetVolumeCurrent())\n            }\n            for _, o := range ev.GetDisappearedOrders() {\n                fmt.Printf(\"[Trade|DEL]  Ticket:%d Symbol:%s Type:%v\\n\",\n                    o.GetTicket(), o.GetSymbol(), o.GetOrderType())\n            }\n            for _, ch := range ev.GetStateChangedOrders() {\n                // ch is OnTradeOrderStateChange; print what\u2019s portable\n                fmt.Printf(\"[Trade|CHG]  Ticket:%d NewState:%v\\n\", ch.GetTicket(), ch.GetState())\n            }\n        }\n\n        // (b) Optional account snapshot with balance/equity/margin\n        if acc := data.GetAccountInfo(); acc != nil {\n            _ = acc // Use in dashboards if needed\n        }\n\n    case err := &lt;-errCh:\n        log.Printf(\"\u274c Stream error: %v\", err)\n        return\n\n    case &lt;-time.After(30 * time.Second): // demo safety timeout; remove in production\n        fmt.Println(\"\u23f1\ufe0f Timeout reached.\")\n        return\n    }\n}\n</code></pre>"},{"location":"Stream/StreamTradeUpdates/#method-signature-helper","title":"\ud83e\uddfe Method Signature (Helper)","text":"<pre><code>func (s *MT5Service) StreamTradeUpdates(ctx context.Context)\n</code></pre> <p>Underlying gRPC (per bindings):</p> <ul> <li>Stream: <code>OnTrade(ctx)</code></li> <li>Envelope: <code>OnTradeReply</code></li> <li>Payload: <code>OnTradeData</code> with <code>EventData</code> := <code>OnTadeEventData</code></li> </ul>"},{"location":"Stream/StreamTradeUpdates/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Required Description <code>ctx</code> <code>context.Context</code> yes Controls stream lifetime (cancel/timeout)."},{"location":"Stream/StreamTradeUpdates/#output-packet-schema","title":"\u2b06\ufe0f Output (Packet Schema)","text":"<p><code>OnTradeData</code> fields (commonly used):</p> Field Type Purpose <code>EventData</code> <code>OnTadeEventData</code> Realtime order/deal deltas (see below). <code>AccountInfo</code> <code>OnEventAccountInfo</code> Optional account snapshot (Balance/Equity/Margin/FreeMargin/Profit). <code>TerminalInstanceGuidId</code> <code>string</code> Terminal instance identifier. <p><code>OnTadeEventData</code> key groups:</p> Group Element Type Meaning <code>NewOrders</code> <code>OnTradeOrderInfo</code> Orders just created/appeared. <code>DisappearedOrders</code> <code>OnTradeOrderInfo</code> Orders removed (filled/canceled/closed). <code>StateChangedOrders</code> <code>OnTradeOrderStateChange</code> Order state transitions. (plus history deltas) deals/orders (various) Depending on server settings, you might receive historical updates. <p>Portable fields you can print (based on your service examples):</p> <ul> <li><code>OnTradeOrderInfo</code>: <code>Ticket (int64)</code>, <code>Symbol (string)</code>, <code>OrderType (enum)</code>, <code>VolumeCurrent (float64)</code></li> <li><code>OnTradeOrderStateChange</code>: <code>Ticket (int64)</code>, <code>State (enum)</code></li> </ul> <p>Exact field set may vary slightly per bindings version; prefer getters you actually see in your generated <code>*.pb.go</code>.</p>"},{"location":"Stream/StreamTradeUpdates/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Live audit of order lifecycle: creation, state changes, disappearance.</li> <li>Drive UIs/alerts when orders are filled, canceled, or modified.</li> <li>Maintain a push\u2011based cache of current working orders.</li> </ul>"},{"location":"Stream/StreamTradeUpdates/#best-practices","title":"\u2705 Best Practices","text":"<ol> <li>Keep an in\u2011memory map keyed by <code>Ticket (int64)</code> for current working orders.</li> <li>On <code>DisappearedOrders</code> \u2014 evict from cache/UI.</li> <li>Handle <code>StateChangedOrders</code> idempotently; same ticket may change state multiple times.</li> <li>Throttle logs \u2014 bursts are normal around news or mass order actions.</li> <li>Wrap with reconnect/backoff for long\u2011running daemons.</li> <li>Combine with <code>StreamOpenedOrderProfits</code> and <code>StreamOpenedOrderTickets</code> for a full realtime picture.</li> </ol>"},{"location":"Stream/StreamTradeUpdates/#pitfalls","title":"\u26a0\ufe0f Pitfalls","text":"<ul> <li>Field assumptions: rely only on getters present in your bindings (check <code>*.pb.go</code>).</li> <li>Race conditions: events can arrive rapidly; update your cache atomically.</li> <li>Ordering: network jitter may reorder packets; use timestamps/state to reconcile.</li> <li>Flooding: big activity spikes can produce large bursts \u2014 consider buffering/worker pools.</li> </ul>"},{"location":"Stream/StreamTradeUpdates/#variations","title":"\ud83d\udd00 Variations","text":"<ul> <li>Filter by symbol or order type to reduce noise.</li> <li>Attach account snapshot to each UI event card (use <code>AccountInfo</code>).</li> <li>Correlate with history: if you also persist closed deals, link <code>DisappearedOrders</code> to the deal records.</li> </ul>"},{"location":"Stream/StreamTradeUpdates/#sample-output","title":"\ud83e\uddea Sample Output","text":"<pre><code>\ud83d\udd04 Streaming trade updates...\n[Trade|NEW]  Ticket:12345679 Symbol:EURUSD Type:ORDER_TYPE_BUY Volume:0.10\n[Trade|CHG]  Ticket:12345679 NewState:ORDER_STATE_PARTIAL\n[Trade|DEL]  Ticket:12345679 Symbol:EURUSD Type:ORDER_TYPE_BUY\n\u2705 Trade stream ended.\n</code></pre>"},{"location":"Stream/StreamingMethods_Overview/","title":"\ud83d\udce1 Streaming Methods \u2014 Overview","text":"<p>These methods provide real-time streaming capabilities from MT5 via gRPC:</p> <ul> <li>Price quotes</li> <li>Opened orders profits</li> <li>Opened order tickets</li> <li>Trade events (new, modified, closed)</li> </ul> <p>\u26a0\ufe0f Important: Streaming requires a live connection and a properly managed context. Always use <code>context.WithCancel</code> or explicit timeouts to avoid leaks.</p>"},{"location":"Stream/StreamingMethods_Overview/#streaming-quotes","title":"\ud83d\udd04 Streaming Quotes","text":"<ul> <li>File: StreamingQuotes.md</li> <li>Receive real-time Bid/Ask prices for selected symbols.</li> </ul>"},{"location":"Stream/StreamingMethods_Overview/#stream-opened-order-profits","title":"\ud83d\udcc8 Stream Opened Order Profits","text":"<ul> <li>File: StreamOpenedOrderProfits.md</li> <li>Get continuous updates on profits/losses for opened positions (new, updated, deleted).</li> </ul>"},{"location":"Stream/StreamingMethods_Overview/#stream-opened-order-tickets","title":"\ud83c\udfab Stream Opened Order Tickets","text":"<ul> <li>File: StreamOpenedOrderTickets.md</li> <li>Stream opened tickets for positions and pending orders.</li> </ul>"},{"location":"Stream/StreamingMethods_Overview/#stream-trade-updates","title":"\ud83d\udd14 Stream Trade Updates","text":"<ul> <li>File: StreamTradeUpdates.md</li> <li>Subscribe to trading events \u2014 new orders, modifications, and executions.</li> </ul>"},{"location":"Stream/StreamingMethods_Overview/#things-to-watch-out-for","title":"\u26a0\ufe0f Things to Watch Out For","text":"<ul> <li>Streams do not end by themselves \u2014 always cancel or set timeouts.</li> <li>Errors arrive on a dedicated <code>errCh</code> channel \u2014 log and handle them properly.</li> <li>Do not keep too many active streams \u2014 the terminal and gRPC connection can overload.</li> <li>Default timeout in examples: 30 seconds without events \u2192 stream closes.</li> </ul>"},{"location":"Stream/StreamingQuotes/","title":"Streaming Quotes (OnSymbolTick) \u2014 Proto\u2011accurate","text":"<p>Request: subscribe to live ticks for one or more symbols. Uses gRPC streaming with two channels: data and errors.</p>"},{"location":"Stream/StreamingQuotes/#code-example","title":"Code Example","text":"<pre><code>// High-level helper (inside MT5Service):\nsvc.StreamQuotes(ctx) // by default streams EURUSD, GBPUSD\n\n// Low-level (control your own symbols and packets):\nsymbols := []string{\"EURUSD\", \"GBPUSD\", \"XAUUSD\"}\nctx2, cancel := context.WithCancel(ctx)\ndefer cancel()\n\ntickCh, errCh := s.account.OnSymbolTick(ctx2, symbols)\nfmt.Println(\"\ud83d\udd04 Streaming ticks...\")\nfor {\n    select {\n    case reply, ok := &lt;-tickCh:\n        if !ok { fmt.Println(\"\u2705 Tick stream ended.\"); return }\n        data := reply.GetOnSymbolTickData() // name may be GetData() in your wrapper\n        if data == nil || data.GetSymbolTick() == nil { continue }\n        st := data.GetSymbolTick() // MrpcSubscriptionMqlTick\n        fmt.Printf(\"[Tick] %s | Bid: %.5f | Ask: %.5f | Time: %s\n\",\n            st.GetSymbol(), st.GetBid(), st.GetAsk(), st.GetTime().AsTime().Format(\"2006-01-02 15:04:05\"))\n    case err := &lt;-errCh:\n        log.Printf(\"\u274c Stream error: %v\", err)\n        return\n    case &lt;-time.After(30 * time.Second): // safety timeout for demos\n        fmt.Println(\"\u23f1\ufe0f Timeout reached.\")\n        return\n    }\n}\n</code></pre>"},{"location":"Stream/StreamingQuotes/#method-signature-helper","title":"Method Signature (helper)","text":"<pre><code>func (s *MT5Service) StreamQuotes(ctx context.Context)\n</code></pre> <p>Underlying gRPC: <code>OnSymbolTick</code> \u2192 <code>OnSymbolTickReply</code> \u2192 <code>OnSymbolTickData</code> with <code>MrpcSubscriptionMqlTick</code>.</p>"},{"location":"Stream/StreamingQuotes/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Required Description <code>ctx</code> <code>context.Context</code> yes Controls lifetime of the stream (cancel/timeout). <code>symbols</code> <code>[]string</code> no* Helper uses an internal slice (e.g., <code>EURUSD</code>, <code>GBPUSD</code>). For a custom list, use the low-level example above. <p>*In the helper, edit the <code>symbols := []string{...}</code> line to change the watch list.</p>"},{"location":"Stream/StreamingQuotes/#output","title":"\u2b06\ufe0f Output","text":"<p>Tick message type: <code>MrpcSubscriptionMqlTick</code> Available getters (per your bindings):</p> Field Type Note <code>Time</code> <code>*timestamppb.Timestamp</code> server time <code>Bid</code> <code>float64</code> current bid <code>Ask</code> <code>float64</code> current ask <code>Last</code> <code>float64</code> last trade/price, may be 0 for FX <code>Volume</code> <code>uint64</code> tick volume <code>TimeMsc</code> <code>int64</code> epoch ms <code>Flags</code> <code>uint32</code> exchange flags/bitmask <code>VolumeReal</code> <code>float64</code> real volume (if provided) <code>Symbol</code> <code>string</code> symbol name <p>Sample console output:</p> <pre><code>[Tick] EURUSD | Bid: 1.09876 | Ask: 1.09889 | Time: 2025-08-17 12:00:01\n[Tick] GBPUSD | Bid: 1.28543 | Ask: 1.28558 | Time: 2025-08-17 12:00:01\n</code></pre>"},{"location":"Stream/StreamingQuotes/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Feed live prices into strategies, dashboards, or alerting.</li> <li>Validate connectivity and symbol availability in real time.</li> </ul>"},{"location":"Stream/StreamingQuotes/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Symbol visibility: ensure symbols are visible (<code>EnsureSymbolVisible</code>) before streaming.</li> <li>Throttle logs: printing every tick can flood stdout; batch or rate\u2011limit in production.</li> <li>Stop conditions: stream ends when <code>ctx</code> is canceled, timeout fires, server closes the stream, or an error arrives on <code>errCh</code>.</li> <li>Reconnect logic: for long-running services, wrap with retry/backoff on errors.</li> <li>Scope the list: watch only the symbols you need to reduce traffic.</li> </ul>"},{"location":"Stream/StreamingQuotes/#pitfalls","title":"\u26a0\ufe0f Pitfalls","text":"<ul> <li>No trading side-effects, but high CPU/log I/O possible if you print every tick.</li> <li>On quiet markets you may see long pauses \u2014 this is normal.</li> </ul>"},{"location":"Stream/StreamingQuotes/#variations","title":"Variations","text":"<ul> <li>Change list: <code>symbols := []string{\"EURUSD\", \"XAUUSD\"}</code>.</li> <li>Remove demo timeout: drop the <code>time.After(...)</code> case to keep the stream open.</li> <li>Run several streams in parallel with a shared parent context and <code>sync.WaitGroup</code>.</li> </ul>"},{"location":"TradingOps%28DANGEROUS%29/BuyMarket/","title":"Sending a Market Order (Buy Example)","text":"<p>Request: demonstrate how to place a Buy Market order and parse the result.</p>"},{"location":"TradingOps%28DANGEROUS%29/BuyMarket/#code-example","title":"Code Example","text":"<pre><code>// High-level helper:\nsvc.BuyMarket(ctx, \"EURUSD\", 0.10, nil, nil)\n\n// Internally:\nvolume := 0.10\nslippage := int32(20)         // allowed slippage in points\ncomment := \"Buy market order\"\nmagic := int32(12345)\n\nres, err := svc.account.OrderSend(\n    ctx,\n    pb.MRPC_ENUM_TRADE_REQUEST_ACTIONS_TRADE_ACTION_DEAL, // direct market deal\n    pb.ENUM_ORDER_TYPE_TF_ORDER_TYPE_TF_BUY,              // Buy\n    \"EURUSD\",\n    volume,\n    0,              // price=0 means \"market\" on most servers\n    &amp;slippage,\n    nil,            // StopLoss (absolute price)\n    nil,            // TakeProfit (absolute price)\n    &amp;comment,\n    &amp;magic,\n    nil,            // expiration not used for market orders\n)\nif err != nil {\n    log.Printf(\"\u274c BuyMarket error: %v\", err)\n    return\n}\n\n// Read result\ndeal := res.GetDeal()\nprice := res.GetPrice()\ncode  := res.GetReturnedCode()\nif deal != 0 {\n    fmt.Printf(\"\u2705 Buy executed! Deal:%d Volume:%.2f Price:%.5f Code:%d\\n\", deal, volume, price, code)\n} else {\n    fmt.Printf(\"\u26a0\ufe0f No deal ticket returned | Price: %.5f | Code: %d\\n\", price, code)\n}\n</code></pre>"},{"location":"TradingOps%28DANGEROUS%29/BuyMarket/#method-signature-helper","title":"Method Signature (helper)","text":"<pre><code>func (s *MT5Service) BuyMarket(ctx context.Context, symbol string, volume float64, sl *float64, tp *float64)\n</code></pre>"},{"location":"TradingOps%28DANGEROUS%29/BuyMarket/#input","title":"\ud83d\udd3d Input","text":"<p>Helper accepts <code>ctx</code>, <code>symbol</code>, <code>volume</code>, optional <code>sl</code>, and <code>tp</code>. The underlying <code>OrderSend</code> call has full parameter set:</p> Parameter Type Required Description <code>ctx</code> <code>context.Context</code> yes Timeout/cancel control. <code>action</code> <code>MRPC_ENUM_TRADE_REQUEST_ACTIONS</code> yes <code>TRADE_ACTION_DEAL</code> for market trades. <code>orderType</code> <code>ENUM_ORDER_TYPE_TF</code> yes <code>ORDER_TYPE_TF_BUY</code> for Buy. <code>symbol</code> <code>string</code> yes Symbol name. <code>volume</code> <code>float64</code> yes Lots to buy. <code>price</code> <code>float64</code> no <code>0</code> \u2192 market execution. <code>slippage</code> <code>*int32</code> no Max slippage (points). <code>sl</code> <code>*float64</code> no Stop Loss absolute price. <code>tp</code> <code>*float64</code> no Take Profit absolute price. <code>comment</code> <code>*string</code> no Order comment. <code>magic</code> <code>*int32</code> no EA magic number. <code>expiration</code> <code>*google.protobuf.Timestamp</code> no Not used for market orders."},{"location":"TradingOps%28DANGEROUS%29/BuyMarket/#output","title":"\u2b06\ufe0f Output","text":"<p>Returns <code>OrderSendData</code> with main fields:</p> Field Type Description <code>Deal</code> <code>uint64</code> Deal ticket if trade executed. <code>Order</code> <code>uint64</code> Order ticket (rarely used in market deals). <code>Price</code> <code>double</code> Execution price. <code>Volume</code> <code>double</code> Executed volume. <code>ReturnedCode</code> <code>uint32</code> Numeric result code. <code>ReturnedStringCode</code> <code>string</code> Short code. <code>ReturnedCodeDescription</code> <code>string</code> Human description."},{"location":"TradingOps%28DANGEROUS%29/BuyMarket/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Execute a direct Buy market order.</li> <li>Simplest way to enter a trade at current market price.</li> <li>Common for testing connectivity and trading logic.</li> </ul>"},{"location":"TradingOps%28DANGEROUS%29/BuyMarket/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Use <code>sl</code> and <code>tp</code> to attach StopLoss/TakeProfit in the same request.</li> <li>Slippage should reflect broker contract size: e.g., <code>20</code> points \u2248 2 pips on 5\u2011digit brokers.</li> <li>Execution is immediate or rejected depending on broker\u2019s market model (Market/ECN/STP).</li> <li>Always check <code>ReturnedCode</code> and logs for broker rejections or errors.</li> </ul>"},{"location":"TradingOps%28DANGEROUS%29/CloseAllPositions/","title":"\ud83e\uddf9 Closing All Open Positions","text":"<p>Request: close all open positions for the account (market). Use with caution.</p>"},{"location":"TradingOps%28DANGEROUS%29/CloseAllPositions/#code-example","title":"Code Example","text":"<pre><code>// High-level helper (prints a status line):\nsvc.ShowCloseAllPositions(ctx)\n\n// Internals (simplified):\nif err := svc.account.CloseAllPositions(ctx); err != nil {\n    log.Printf(\"\u274c CloseAllPositions error: %v\", err)\n    return\n}\nfmt.Println(\"\u2705 All positions closed (or none existed).\")\n</code></pre>"},{"location":"TradingOps%28DANGEROUS%29/CloseAllPositions/#method-signature-helper","title":"Method Signature (helper)","text":"<pre><code>func (s *MT5Service) ShowCloseAllPositions(ctx context.Context)\n</code></pre>"},{"location":"TradingOps%28DANGEROUS%29/CloseAllPositions/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Required Description <code>ctx</code> <code>context.Context</code> yes Timeout/cancel control."},{"location":"TradingOps%28DANGEROUS%29/CloseAllPositions/#output","title":"\u2b06\ufe0f Output","text":"<ul> <li>On success: <code>\u2705 All positions closed (or none existed).</code></li> <li>On error: <code>\u274c CloseAllPositions error: &lt;err&gt;</code></li> </ul> <p>Under the hood, the implementation may iterate over current positions and issue a close for each. Behavior (e.g., batching) can vary by broker/API.</p>"},{"location":"TradingOps%28DANGEROUS%29/CloseAllPositions/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Emergency/Panic close (risk off).</li> <li>End\u2011of\u2011day cleanup.</li> <li>Reset state before strategy change or redeploy.</li> </ul>"},{"location":"TradingOps%28DANGEROUS%29/CloseAllPositions/#notes-tips","title":"\u26a0\ufe0f Notes &amp; Tips","text":"<ul> <li>Danger zone: this command will attempt to close every open position. Double\u2011confirm in UI or logs before calling from automation.</li> <li>Permissions &amp; trading hours: broker may reject closes outside session or for symbols in <code>CLOSE_ONLY</code> mode.</li> <li>Slippage control: mass\u2011closing under volatility can result in unexpected fills; consider pre\u2011hedging or staged exits if precision is critical.</li> <li>Works best in netting accounts. In hedging, expect ticket\u2011by\u2011ticket closes.</li> </ul>"},{"location":"TradingOps%28DANGEROUS%29/OrderCloseExample/","title":"\ud83d\udd10 Closing an Order by Ticket (Example)","text":"<p>Request: close an existing order/position by <code>ticket</code> (market close by default). Includes full and partial close patterns.</p>"},{"location":"TradingOps%28DANGEROUS%29/OrderCloseExample/#code-example-full-close-market","title":"Code Example \u2014 full close (market) \u2705","text":"<pre><code>// High-level helper (prints a status line):\nsvc.ShowOrderCloseExample(ctx, 123456789)\n\n// Internals (simplified):\n// Passing price=nil, volume=nil \u2192 let server close at market with full remaining volume.\nres, err := svc.account.OrderClose(ctx, 123456789, nil /*price*/, nil /*volume*/)\nif err != nil {\n    log.Printf(\"\u274c OrderClose error: %v\", err)\n    return\n}\nfmt.Printf(\"\u2705 Order closed. CloseMode: %s | Code: %d (%s/%s)\\n\",\n    res.GetCloseMode().String(),\n    res.GetReturnedCode(),\n    res.GetReturnedStringCode(),\n    res.GetReturnedCodeDescription(),\n)\n</code></pre>"},{"location":"TradingOps%28DANGEROUS%29/OrderCloseExample/#code-example-partial-close-specify-volume","title":"Code Example \u2014 partial close (specify volume) \ud83e\udde9","text":"<pre><code>// Close only part of the position, e.g. 0.05 lots\npartial := 0.05\nres, err := svc.account.OrderClose(ctx, 123456789, nil /*market price*/, &amp;partial)\nif err != nil {\n    log.Printf(\"\u274c OrderClose(partial) error: %v\", err)\n    return\n}\nfmt.Printf(\"\u2705 Partial close sent | Volume closed: %.2f | Code: %d\\n\", partial, res.GetReturnedCode())\n</code></pre> <p>If your broker/account type doesn\u2019t allow partial closes (e.g., netting mode), the server may reject or perform a reduce\u2011by operation differently.</p>"},{"location":"TradingOps%28DANGEROUS%29/OrderCloseExample/#method-signature-helper","title":"Method Signature (helper)","text":"<pre><code>func (s *MT5Service) ShowOrderCloseExample(ctx context.Context, ticket uint64)\n</code></pre>"},{"location":"TradingOps%28DANGEROUS%29/OrderCloseExample/#input","title":"\ud83d\udd3d Input","text":"<p>Underlying RPC <code>OrderClose</code> accepts:</p> Parameter Type Required Description <code>ctx</code> <code>context.Context</code> yes Timeout/cancel control. <code>ticket</code> <code>uint64</code> yes Ticket of the order/position to close. <code>price</code> <code>*float64</code> no Close price. <code>nil</code> \u2192 market close at current Bid/Ask. <code>volume</code> <code>*float64</code> no Volume to close in lots. <code>nil</code> \u2192 full remaining volume."},{"location":"TradingOps%28DANGEROUS%29/OrderCloseExample/#output","title":"\u2b06\ufe0f Output","text":"<p>Returns <code>OrderSendData</code> with fields used for diagnostics:</p> Field Type Description <code>CloseMode</code> <code>enum</code> Server\u2019s close mode (string via <code>.String()</code>). <code>ReturnedCode</code> <code>uint32</code> Numeric result code. <code>ReturnedStringCode</code> <code>string</code> Short code. <code>ReturnedCodeDescription</code> <code>string</code> Human\u2011readable description. <code>Price</code> <code>double</code> Server close price (if provided). <code>Volume</code> <code>double</code> Volume processed by the close operation."},{"location":"TradingOps%28DANGEROUS%29/OrderCloseExample/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Exit an existing trade entirely or partially.</li> <li>Programmatic risk management (e.g., scale\u2011out on targets or risk rules).</li> </ul>"},{"location":"TradingOps%28DANGEROUS%29/OrderCloseExample/#notes-tips","title":"\u26a0\ufe0f Notes &amp; Tips","text":"<ul> <li>Market vs specified price: <code>price=nil</code> is simplest (market). If you pass a price, ensure it makes sense for the side; otherwise expect rejects.</li> <li>Slippage control: this API variant doesn\u2019t take a slippage parameter; if you require tight control, consider alternative close flows (e.g., reverse order or modify then close depending on broker).</li> <li>Netting vs Hedging: partial close semantics vary. In netting accounts, closing reduces net position; in hedging, closes affect a specific ticket.</li> <li>Permissions &amp; trading hours: broker may reject closes outside session or for symbols in <code>TRADE_MODE_CLOSE_ONLY</code>.</li> </ul>"},{"location":"TradingOps%28DANGEROUS%29/OrderDeleteExample/","title":"\ud83d\uddd1\ufe0f Deleting a Pending Order by Ticket (Example)","text":"<p>Request: delete/cancel an existing pending order (limit/stop/stop\u2011limit) by its <code>ticket</code>.</p>"},{"location":"TradingOps%28DANGEROUS%29/OrderDeleteExample/#code-example-with-precheck","title":"Code Example \u2014 with pre\u2011check \ud83d\udd0e","text":"<pre><code>// Suppose you know the ticket, but want to verify it exists and is pending:\nfunc deletePendingIfExists(ctx context.Context, svc *MT5Service, ticket uint64) {\n    // 1) Optional: try to fetch historical/active; broker APIs differ.\n    //    If you have a direct \"get pending by ticket\" use it. Here we do a simple check via OpenedOrders.\n    data, err := svc.account.OpenedOrders(ctx)\n    if err != nil {\n        log.Printf(\"\u274c OpenedOrders error: %v\", err)\n        return\n    }\n    isPending := false\n    for _, o := range data.GetOpenedOrders() {\n        if o.GetTicket() == ticket {\n            // Consider types: *_LIMIT, *_STOP, *_STOP_LIMIT as pending.\n            t := o.GetType()\n            if t == pb.ENUM_ORDER_TYPE_TF_ORDER_TYPE_TF_BUY_LIMIT ||\n               t == pb.ENUM_ORDER_TYPE_TF_ORDER_TYPE_TF_SELL_LIMIT ||\n               t == pb.ENUM_ORDER_TYPE_TF_ORDER_TYPE_TF_BUY_STOP ||\n               t == pb.ENUM_ORDER_TYPE_TF_ORDER_TYPE_TF_SELL_STOP ||\n               t == pb.ENUM_ORDER_TYPE_TF_ORDER_TYPE_TF_BUY_STOP_LIMIT ||\n               t == pb.ENUM_ORDER_TYPE_TF_ORDER_TYPE_TF_SELL_STOP_LIMIT {\n                isPending = true\n                break\n            }\n        }\n    }\n    if !isPending {\n        log.Printf(\"\u2139\ufe0f Ticket %d is not a pending order (or not found)\", ticket)\n        return\n    }\n\n    // 2) Delete the pending order\n    res, err := svc.account.DeleteOrder(ctx, ticket)\n    if err != nil {\n        log.Printf(\"\u274c DeleteOrder error: %v\", err)\n        return\n    }\n    fmt.Printf(\"\u2705 Pending order deleted. CloseMode: %s | Code: %d (%s/%s)\\n\",\n        res.GetCloseMode().String(),\n        res.GetReturnedCode(),\n        res.GetReturnedStringCode(),\n        res.GetReturnedCodeDescription(),\n    )\n}\n</code></pre>"},{"location":"TradingOps%28DANGEROUS%29/OrderDeleteExample/#method-signature-helper","title":"Method Signature (helper)","text":"<pre><code>func (s *MT5Service) ShowOrderDeleteExample(ctx context.Context, ticket uint64)\n</code></pre>"},{"location":"TradingOps%28DANGEROUS%29/OrderDeleteExample/#input","title":"\ud83d\udd3d Input","text":"<p>Underlying RPC <code>DeleteOrder</code> accepts:</p> Parameter Type Required Description <code>ctx</code> <code>context.Context</code> yes Timeout/cancel control. <code>ticket</code> <code>uint64</code> yes Ticket of the pending order to delete."},{"location":"TradingOps%28DANGEROUS%29/OrderDeleteExample/#output","title":"\u2b06\ufe0f Output","text":"<p>Returns <code>OrderSendData</code> (close/delete result):</p> Field Type Description <code>CloseMode</code> <code>enum</code> Server\u2019s delete/close mode. <code>ReturnedCode</code> <code>uint32</code> Numeric result code. <code>ReturnedStringCode</code> <code>string</code> Short code. <code>ReturnedCodeDescription</code> <code>string</code> Human\u2011readable description."},{"location":"TradingOps%28DANGEROUS%29/OrderDeleteExample/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Cancel a pending order that is no longer needed (e.g., invalidated setup).</li> </ul>"},{"location":"TradingOps%28DANGEROUS%29/OrderDeleteExample/#notes-tips","title":"\u26a0\ufe0f Notes &amp; Tips","text":"<ul> <li>This call is for pending orders only. To exit a live position, use <code>OrderClose</code>.</li> <li>Race conditions: the order may fill between your check and delete. Always handle server codes gracefully.</li> <li>Permissions: some symbols can be in <code>CLOSE_ONLY</code> or disallow deletes during certain sessions.</li> </ul>"},{"location":"TradingOps%28DANGEROUS%29/OrderModifyExample/","title":"\u270f\ufe0f Modifying an Existing Order (Example)","text":"<p>Request: modify fields of an existing ticket \u2014 price (for pendings), SL/TP, and/or expiration.</p>"},{"location":"TradingOps%28DANGEROUS%29/OrderModifyExample/#code-example","title":"Code Example","text":"<pre><code>// High-level helper (prints a simple status):\nsvc.ShowOrderModifyExample(ctx, 123456789)\n\n// Internals (simplified):\n// For demo: change only SL/TP (typical for market positions or pendings)\nnewSL := 1.0500\nnewTP := 1.0900\n\nres, err := svc.account.OrderModify(\n    ctx,\n    123456789,   // ticket (pending order or position/order ticket depending on broker semantics)\n    nil,         // newPrice: set only for PENDING orders to move entry price\n    &amp;newSL,      // Stop Loss (absolute price) or nil to keep\n    &amp;newTP,      // Take Profit (absolute price) or nil to keep\n    nil,         // expiration: for pendings; nil to keep/remove depending on TIF\n)\nif err != nil {\n    log.Printf(\"\u274c OrderModify error: %v\", err)\n    return\n}\nif res != nil {\n    fmt.Println(\"\u2705 Order successfully modified.\")\n} else {\n    fmt.Println(\"\u26a0\ufe0f Order was NOT modified.\")\n}\n</code></pre>"},{"location":"TradingOps%28DANGEROUS%29/OrderModifyExample/#method-signature-helper","title":"Method Signature (helper)","text":"<pre><code>func (s *MT5Service) ShowOrderModifyExample(ctx context.Context, ticket uint64)\n</code></pre>"},{"location":"TradingOps%28DANGEROUS%29/OrderModifyExample/#input","title":"\ud83d\udd3d Input","text":"<p>Underlying RPC <code>OrderModify</code> accepts:</p> Parameter Type Required Description <code>ctx</code> <code>context.Context</code> yes Timeout/cancel control. <code>ticket</code> <code>uint64</code> yes Ticket to modify (pending order / order). <code>newPrice</code> <code>*float64</code> no Pending orders only \u2014 new entry price. <code>nil</code> \u2192 keep current. <code>newSL</code> <code>*float64</code> no Stop Loss absolute price. <code>nil</code> \u2192 keep. <code>newTP</code> <code>*float64</code> no Take Profit absolute price. <code>nil</code> \u2192 keep. <code>expiration</code> <code>*google.protobuf.Timestamp</code> no New expiration for pendings (use <code>timestamppb.New(...)</code>). <p>For market positions, you typically only change SL/TP. Moving entry price applies to pending orders.</p>"},{"location":"TradingOps%28DANGEROUS%29/OrderModifyExample/#output","title":"\u2b06\ufe0f Output","text":"<p>Returns an implementation-specific confirmation (non-nil on success). The helper prints one of:</p> <ul> <li><code>\u2705 Order successfully modified.</code></li> <li><code>\u26a0\ufe0f Order was NOT modified.</code></li> </ul>"},{"location":"TradingOps%28DANGEROUS%29/OrderModifyExample/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Adjust protective levels (SL/TP) after entry.</li> <li>Reprice or extend lifetime of pending orders.</li> </ul>"},{"location":"TradingOps%28DANGEROUS%29/OrderModifyExample/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>SL/TP are absolute prices \u2014 derive them from pips using symbol <code>Digits</code> and current quote.</li> <li>To change expiration, build <code>exp := timestamppb.New(timeX)</code> and pass it as the last argument.</li> <li>Brokers validate distances to current price; too-tight SL/TP or invalid <code>newPrice</code> will be rejected.</li> <li>Always log/inspect the broker\u2019s returned code/comment if available for troubleshooting.</li> </ul>"},{"location":"TradingOps%28DANGEROUS%29/PlaceBuyLimit/","title":"Placing a Pending Buy Limit Order","text":"<p>Request: place a BUY LIMIT pending order at a specified price (optionally with SL/TP and expiration).</p>"},{"location":"TradingOps%28DANGEROUS%29/PlaceBuyLimit/#code-example","title":"Code Example","text":"<pre><code>// High-level helper (prints a human-readable result):\nsvc.PlaceBuyLimit(ctx, \"EURUSD\", 0.10, 1.07500, nil, nil, timestamppb.New(time.Now().Add(24*time.Hour)))\n\n// Internals (simplified):\nvol := 0.10\nprice := 1.07500\nslip := int32(10)                       // points\ncomment := \"BuyLimit\"\nmagic32 := int32(123456)\nexp := timestamppb.New(time.Now().Add(24*time.Hour))\n\n// 1) Optional dry-run check (the helper does it for you):\ncheckReq := &amp;pb.OrderCheckRequest{\n    MqlTradeRequest: &amp;pb.MrpcMqlTradeRequest{\n        Action:    pb.MRPC_ENUM_TRADE_REQUEST_ACTIONS_TRADE_ACTION_PENDING,\n        OrderType: pb.ENUM_ORDER_TYPE_TF_ORDER_TYPE_TF_BUY_LIMIT,\n        Symbol:    \"EURUSD\",\n        Volume:    vol,\n        Price:     price, // absolute entry price for pending\n        Deviation: 10,    // points\n        TypeFilling: pb.MRPC_ENUM_ORDER_TYPE_FILLING_ORDER_FILLING_FOK,\n        TypeTime: func() pb.MRPC_ENUM_ORDER_TYPE_TIME {\n            if exp != nil { return pb.MRPC_ENUM_ORDER_TYPE_TIME_ORDER_TIME_SPECIFIED }\n            return pb.MRPC_ENUM_ORDER_TYPE_TIME_ORDER_TIME_GTC\n        }(),\n        Expiration:               exp,\n        ExpertAdvisorMagicNumber: 123456,\n        Comment:                  \"PlaceBuyLimit helper\",\n    },\n}\nif chk, err := svc.account.OrderCheck(ctx, checkReq); err == nil {\n    if r := chk.GetMqlTradeCheckResult(); r != nil {\n        fmt.Printf(\"\u2139\ufe0f Check BUY_LIMIT: code=%d comment=%q\\n\", r.GetReturnedCode(), r.GetComment())\n    }\n}\n\n// 2) Actual send:\nres, err := svc.account.OrderSend(\n    ctx,\n    \"EURUSD\",\n    pb.TMT5_ENUM_ORDER_TYPE_TMT5_ORDER_TYPE_BUY_LIMIT,\n    vol,\n    &amp;price, &amp;slip,\n    nil, nil,         // sl, tp (absolute prices) \u2014 set if needed\n    &amp;comment, &amp;magic32,\n    exp,\n)\nif err != nil {\n    log.Printf(\"\u274c OrderSend(BUY_LIMIT): %v\", err)\n    return\n}\n// Read result\nif ord := res.GetOrder(); ord != 0 {\n    fmt.Printf(\"\u2705 BUY_LIMIT placed: order=%d @ %.5f\\n\", ord, res.GetPrice())\n} else if deal := res.GetDeal(); deal != 0 {\n    fmt.Printf(\"\u2705 BUY_LIMIT executed immediately: deal=%d @ %.5f\\n\", deal, res.GetPrice())\n} else {\n    fmt.Printf(\"\u26a0\ufe0f BUY_LIMIT sent @ %.5f (no ticket in response)\\n\", res.GetPrice())\n}\n</code></pre>"},{"location":"TradingOps%28DANGEROUS%29/PlaceBuyLimit/#method-signature-helper","title":"Method Signature (helper)","text":"<pre><code>func (s *MT5Service) PlaceBuyLimit(ctx context.Context, symbol string, volume, price float64, sl, tp *float64, exp *timestamppb.Timestamp)\n</code></pre>"},{"location":"TradingOps%28DANGEROUS%29/PlaceBuyLimit/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Required Description <code>ctx</code> <code>context.Context</code> yes Timeout/cancel control. <code>symbol</code> <code>string</code> yes Symbol name. <code>volume</code> <code>float64</code> yes Lots (respect <code>VolumeMin/Max/Step</code>). <code>price</code> <code>float64</code> yes Absolute entry price for the pending order. <code>sl</code> <code>*float64</code> no Stop Loss absolute price. <code>tp</code> <code>*float64</code> no Take Profit absolute price. <code>exp</code> <code>*google.protobuf.Timestamp</code> no Expiration time; if set, time-in-force becomes <code>*_SPECIFIED</code>."},{"location":"TradingOps%28DANGEROUS%29/PlaceBuyLimit/#output","title":"\u2b06\ufe0f Output","text":"<p>Returns <code>OrderSendData</code> (same as other send calls).</p> Field Type Description <code>Order</code> <code>uint64</code> Pending order ticket (expected for a limit). <code>Deal</code> <code>uint64</code> Deal ticket if order triggered &amp; filled instantly. <code>Price</code> <code>double</code> Price acknowledged by server. <code>ReturnedCode</code> <code>uint32</code> Numeric result code. <code>ReturnedStringCode</code> <code>string</code> Short code. <code>ReturnedCodeDescription</code> <code>string</code> Human description."},{"location":"TradingOps%28DANGEROUS%29/PlaceBuyLimit/#enums-used","title":"Enums used","text":"<ul> <li><code>MRPC_ENUM_TRADE_REQUEST_ACTIONS</code>: <code>TRADE_ACTION_PENDING</code> (check stage).</li> <li><code>ENUM_ORDER_TYPE_TF</code>: <code>ORDER_TYPE_TF_BUY_LIMIT</code> (check stage).</li> <li><code>TMT5_ENUM_ORDER_TYPE</code>: <code>TMT5_ORDER_TYPE_BUY_LIMIT</code> (send stage).</li> <li><code>MRPC_ENUM_ORDER_TYPE_FILLING</code>: typically <code>ORDER_FILLING_FOK</code>.</li> <li><code>MRPC_ENUM_ORDER_TYPE_TIME</code>: <code>ORDER_TIME_GTC</code> or <code>ORDER_TIME_SPECIFIED</code> when <code>exp</code> is provided.</li> </ul>"},{"location":"TradingOps%28DANGEROUS%29/PlaceBuyLimit/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Enter long only when price dips to your specified level.</li> <li>Attach SL/TP immediately and control lifetime via <code>exp</code>.</li> </ul>"},{"location":"TradingOps%28DANGEROUS%29/PlaceBuyLimit/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Ensure <code>price</code> is below current market for BUY_LIMIT, otherwise broker will reject or execute immediately (depending on rules).</li> <li><code>sl</code>/<code>tp</code> are absolute prices; derive from pips/ticks using <code>Digits</code> and <code>TickValueWithSize</code>.</li> <li>If you pass <code>exp</code>, make sure server time zone differences are considered; always use <code>timestamppb.New(timeX)</code> to avoid serialization issues.</li> <li>The helper performs an <code>OrderCheck</code> first (prints code/comment) \u2014 use that output to troubleshoot rejects.</li> </ul>"},{"location":"TradingOps%28DANGEROUS%29/PlaceBuyStop/","title":"\ud83d\udea6 Placing a Pending Buy Stop Order","text":"<p>Request: place a BUY STOP pending order at a trigger price (optionally with SL/TP and expiration).</p>"},{"location":"TradingOps%28DANGEROUS%29/PlaceBuyStop/#code-example","title":"Code Example","text":"<pre><code>// High-level helper (prints a human-readable result):\nsvc.PlaceBuyStop(ctx, \"EURUSD\", 0.10, 1.09200, nil, nil, timestamppb.New(time.Now().Add(24*time.Hour)))\n\n// Internals (simplified):\nvol := 0.10\ntrigger := 1.09200\nslip := int32(10)                       // points\ncomment := \"BuyStop\"\nmagic32 := int32(123456)\nexp := timestamppb.New(time.Now().Add(24*time.Hour))\n\n// 1) Optional dry-run check (the helper does it for you):\ncheckReq := &amp;pb.OrderCheckRequest{\n    MqlTradeRequest: &amp;pb.MrpcMqlTradeRequest{\n        Action:     pb.MRPC_ENUM_TRADE_REQUEST_ACTIONS_TRADE_ACTION_PENDING,\n        OrderType:  pb.ENUM_ORDER_TYPE_TF_ORDER_TYPE_TF_BUY_STOP,\n        Symbol:     \"EURUSD\",\n        Volume:     vol,\n        Price:      trigger, // absolute trigger price\n        Deviation:  10,      // points\n        TypeFilling: pb.MRPC_ENUM_ORDER_TYPE_FILLING_ORDER_FILLING_FOK,\n        TypeTime: func() pb.MRPC_ENUM_ORDER_TYPE_TIME {\n            if exp != nil { return pb.MRPC_ENUM_ORDER_TYPE_TIME_ORDER_TIME_SPECIFIED }\n            return pb.MRPC_ENUM_ORDER_TYPE_TIME_ORDER_TIME_GTC\n        }(),\n        Expiration:               exp,\n        ExpertAdvisorMagicNumber: 123456,\n        Comment:                  \"PlaceBuyStop helper\",\n    },\n}\nif chk, err := svc.account.OrderCheck(ctx, checkReq); err == nil {\n    if r := chk.GetMqlTradeCheckResult(); r != nil {\n        fmt.Printf(\"\u2139\ufe0f Check BUY_STOP: code=%d comment=%q\\n\", r.GetReturnedCode(), r.GetComment())\n    }\n}\n\n// 2) Actual send:\nres, err := svc.account.OrderSend(\n    ctx,\n    \"EURUSD\",\n    pb.TMT5_ENUM_ORDER_TYPE_TMT5_ORDER_TYPE_BUY_STOP,\n    vol,\n    &amp;trigger, &amp;slip,\n    nil, nil,         // sl, tp (absolute prices) \u2014 set if needed\n    &amp;comment, &amp;magic32,\n    exp,\n)\nif err != nil {\n    log.Printf(\"\u274c OrderSend(BUY_STOP): %v\", err)\n    return\n}\n// Read result\nif ord := res.GetOrder(); ord != 0 {\n    fmt.Printf(\"\u2705 BUY_STOP placed: order=%d @ %.5f\\n\", ord, res.GetPrice())\n} else if deal := res.GetDeal(); deal != 0 {\n    fmt.Printf(\"\u2705 BUY_STOP executed immediately: deal=%d @ %.5f\\n\", deal, res.GetPrice())\n} else {\n    fmt.Printf(\"\u26a0\ufe0f BUY_STOP sent @ %.5f (no ticket in response)\\n\", res.GetPrice())\n}\n</code></pre>"},{"location":"TradingOps%28DANGEROUS%29/PlaceBuyStop/#method-signature-helper","title":"Method Signature (helper)","text":"<pre><code>func (s *MT5Service) PlaceBuyStop(ctx context.Context, symbol string, volume, trigger float64, sl, tp *float64, exp *timestamppb.Timestamp)\n</code></pre>"},{"location":"TradingOps%28DANGEROUS%29/PlaceBuyStop/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Required Description <code>ctx</code> <code>context.Context</code> yes Timeout/cancel control. <code>symbol</code> <code>string</code> yes Symbol name. <code>volume</code> <code>float64</code> yes Lots (respect <code>VolumeMin/Max/Step</code>). <code>trigger</code> <code>float64</code> yes Absolute trigger price that arms the pending order. <code>sl</code> <code>*float64</code> no Stop Loss absolute price. <code>tp</code> <code>*float64</code> no Take Profit absolute price. <code>exp</code> <code>*google.protobuf.Timestamp</code> no Expiration time; if set, time-in-force becomes <code>*_SPECIFIED</code>."},{"location":"TradingOps%28DANGEROUS%29/PlaceBuyStop/#output","title":"\u2b06\ufe0f Output","text":"<p>Returns <code>OrderSendData</code>.</p> Field Type Description <code>Order</code> <code>uint64</code> Pending order ticket (expected for a stop). <code>Deal</code> <code>uint64</code> Deal ticket if order triggered &amp; filled immediately. <code>Price</code> <code>double</code> Price acknowledged by server. <code>ReturnedCode</code> <code>uint32</code> Numeric result code. <code>ReturnedStringCode</code> <code>string</code> Short code. <code>ReturnedCodeDescription</code> <code>string</code> Human description."},{"location":"TradingOps%28DANGEROUS%29/PlaceBuyStop/#enums-used","title":"Enums used","text":"<ul> <li><code>MRPC_ENUM_TRADE_REQUEST_ACTIONS</code>: <code>TRADE_ACTION_PENDING</code> (check stage).</li> <li><code>ENUM_ORDER_TYPE_TF</code>: <code>ORDER_TYPE_TF_BUY_STOP</code> (check stage).</li> <li><code>TMT5_ENUM_ORDER_TYPE</code>: <code>TMT5_ORDER_TYPE_BUY_STOP</code> (send stage).</li> <li><code>MRPC_ENUM_ORDER_TYPE_FILLING</code>: typically <code>ORDER_FILLING_FOK</code>.</li> <li><code>MRPC_ENUM_ORDER_TYPE_TIME</code>: <code>ORDER_TIME_GTC</code> or <code>ORDER_TIME_SPECIFIED</code> when <code>exp</code> is provided.</li> </ul>"},{"location":"TradingOps%28DANGEROUS%29/PlaceBuyStop/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Enter long on breakout: buy above current market when price reaches your trigger.</li> <li>Pair with SL/TP and a finite lifetime via <code>exp</code>.</li> </ul>"},{"location":"TradingOps%28DANGEROUS%29/PlaceBuyStop/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Ensure <code>trigger</code> is above current market for BUY_STOP; otherwise broker may reject or convert it depending on rules.</li> <li>For a long, sanity-check: SL below, TP above the trigger.</li> <li><code>sl</code>/<code>tp</code> are absolute prices; derive from pips/ticks using <code>Digits</code> and <code>TickValueWithSize</code>.</li> <li>If you pass <code>exp</code>, mind server vs local timezone; build time via <code>timestamppb.New(...)</code>.</li> <li>The helper performs an <code>OrderCheck</code> first (prints code/comment) \u2014 use that output to troubleshoot rejects.</li> </ul>"},{"location":"TradingOps%28DANGEROUS%29/PlaceSellLimit/","title":"Placing a Pending Sell Limit Order","text":"<p>Request: place a SELL LIMIT pending order at a specified price (optionally with SL/TP and expiration).</p>"},{"location":"TradingOps%28DANGEROUS%29/PlaceSellLimit/#code-example","title":"Code Example","text":"<pre><code>// High-level helper (prints a human-readable result):\nsvc.PlaceSellLimit(ctx, \"EURUSD\", 0.10, 1.09500, nil, nil, timestamppb.New(time.Now().Add(24*time.Hour)))\n\n// Internals (simplified):\nvol := 0.10\nprice := 1.09500\nslip := int32(10)                       // points\ncomment := \"SellLimit\"\nmagic32 := int32(123456)\nexp := timestamppb.New(time.Now().Add(24*time.Hour))\n\n// 1) Optional dry-run check (the helper does it for you):\ncheckReq := &amp;pb.OrderCheckRequest{\n    MqlTradeRequest: &amp;pb.MrpcMqlTradeRequest{\n        Action:     pb.MRPC_ENUM_TRADE_REQUEST_ACTIONS_TRADE_ACTION_PENDING,\n        OrderType:  pb.ENUM_ORDER_TYPE_TF_ORDER_TYPE_TF_SELL_LIMIT,\n        Symbol:     \"EURUSD\",\n        Volume:     vol,\n        Price:      price, // absolute entry price for pending\n        Deviation:  10,    // points\n        TypeFilling: pb.MRPC_ENUM_ORDER_TYPE_FILLING_ORDER_FILLING_FOK,\n        TypeTime: func() pb.MRPC_ENUM_ORDER_TYPE_TIME {\n            if exp != nil { return pb.MRPC_ENUM_ORDER_TYPE_TIME_ORDER_TIME_SPECIFIED }\n            return pb.MRPC_ENUM_ORDER_TYPE_TIME_ORDER_TIME_GTC\n        }(),\n        Expiration:               exp,\n        ExpertAdvisorMagicNumber: 123456,\n        Comment:                  \"PlaceSellLimit helper\",\n    },\n}\nif chk, err := svc.account.OrderCheck(ctx, checkReq); err == nil {\n    if r := chk.GetMqlTradeCheckResult(); r != nil {\n        fmt.Printf(\"\u2139\ufe0f Check SELL_LIMIT: code=%d comment=%q\\n\", r.GetReturnedCode(), r.GetComment())\n    }\n}\n\n// 2) Actual send:\nres, err := svc.account.OrderSend(\n    ctx,\n    \"EURUSD\",\n    pb.TMT5_ENUM_ORDER_TYPE_TMT5_ORDER_TYPE_SELL_LIMIT,\n    vol,\n    &amp;price, &amp;slip,\n    nil, nil,         // sl, tp (absolute prices) \u2014 set if needed\n    &amp;comment, &amp;magic32,\n    exp,\n)\nif err != nil {\n    log.Printf(\"\u274c OrderSend(SELL_LIMIT): %v\", err)\n    return\n}\n// Read result\nif ord := res.GetOrder(); ord != 0 {\n    fmt.Printf(\"\u2705 SELL_LIMIT placed: order=%d @ %.5f\\n\", ord, res.GetPrice())\n} else if deal := res.GetDeal(); deal != 0 {\n    fmt.Printf(\"\u2705 SELL_LIMIT executed immediately: deal=%d @ %.5f\\n\", deal, res.GetPrice())\n} else {\n    fmt.Printf(\"\u26a0\ufe0f SELL_LIMIT sent @ %.5f (no ticket in response)\\n\", res.GetPrice())\n}\n</code></pre>"},{"location":"TradingOps%28DANGEROUS%29/PlaceSellLimit/#method-signature-helper","title":"Method Signature (helper)","text":"<pre><code>func (s *MT5Service) PlaceSellLimit(ctx context.Context, symbol string, volume, price float64, sl, tp *float64, exp *timestamppb.Timestamp)\n</code></pre>"},{"location":"TradingOps%28DANGEROUS%29/PlaceSellLimit/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Required Description <code>ctx</code> <code>context.Context</code> yes Timeout/cancel control. <code>symbol</code> <code>string</code> yes Symbol name. <code>volume</code> <code>float64</code> yes Lots (respect <code>VolumeMin/Max/Step</code>). <code>price</code> <code>float64</code> yes Absolute entry price for the pending order. <code>sl</code> <code>*float64</code> no Stop Loss absolute price. <code>tp</code> <code>*float64</code> no Take Profit absolute price. <code>exp</code> <code>*google.protobuf.Timestamp</code> no Expiration time; if set, time-in-force becomes <code>*_SPECIFIED</code>."},{"location":"TradingOps%28DANGEROUS%29/PlaceSellLimit/#output","title":"\u2b06\ufe0f Output","text":"<p>Returns <code>OrderSendData</code> (same as other send calls).</p> Field Type Description <code>Order</code> <code>uint64</code> Pending order ticket (expected for a limit). <code>Deal</code> <code>uint64</code> Deal ticket if order triggered &amp; filled instantly. <code>Price</code> <code>double</code> Price acknowledged by server. <code>ReturnedCode</code> <code>uint32</code> Numeric result code. <code>ReturnedStringCode</code> <code>string</code> Short code. <code>ReturnedCodeDescription</code> <code>string</code> Human description."},{"location":"TradingOps%28DANGEROUS%29/PlaceSellLimit/#enums-used","title":"Enums used","text":"<ul> <li><code>MRPC_ENUM_TRADE_REQUEST_ACTIONS</code>: <code>TRADE_ACTION_PENDING</code> (check stage).</li> <li><code>ENUM_ORDER_TYPE_TF</code>: <code>ORDER_TYPE_TF_SELL_LIMIT</code> (check stage).</li> <li><code>TMT5_ENUM_ORDER_TYPE</code>: <code>TMT5_ORDER_TYPE_SELL_LIMIT</code> (send stage).</li> <li><code>MRPC_ENUM_ORDER_TYPE_FILLING</code>: typically <code>ORDER_FILLING_FOK</code>.</li> <li><code>MRPC_ENUM_ORDER_TYPE_TIME</code>: <code>ORDER_TIME_GTC</code> or <code>ORDER_TIME_SPECIFIED</code> when <code>exp</code> is provided.</li> </ul>"},{"location":"TradingOps%28DANGEROUS%29/PlaceSellLimit/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Enter short only when price bounces up to your specified level.</li> <li>Attach SL/TP immediately and control lifetime via <code>exp</code>.</li> </ul>"},{"location":"TradingOps%28DANGEROUS%29/PlaceSellLimit/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Ensure <code>price</code> is above current market for SELL_LIMIT, otherwise broker may reject or fill immediately depending on rules.</li> <li>For a short, sanity-check: SL above price, TP below price.</li> <li><code>sl</code>/<code>tp</code> are absolute prices; derive from pips/ticks using <code>Digits</code> and <code>TickValueWithSize</code>.</li> <li>If you pass <code>exp</code>, mind server vs local timezone; build the time via <code>timestamppb.New(timeX)</code>.</li> <li>The helper performs an <code>OrderCheck</code> first (prints code/comment) \u2014 use that output to troubleshoot rejects.</li> </ul>"},{"location":"TradingOps%28DANGEROUS%29/PlaceSellStop/","title":"\ud83d\udea6 Placing a Pending Sell Stop Order","text":"<p>Request: place a SELL STOP pending order at a trigger price (optionally with SL/TP and expiration).</p>"},{"location":"TradingOps%28DANGEROUS%29/PlaceSellStop/#code-example","title":"Code Example","text":"<pre><code>// High-level helper (prints a human-readable result):\nsvc.PlaceSellStop(ctx, \"EURUSD\", 0.10, 1.07800, nil, nil, timestamppb.New(time.Now().Add(24*time.Hour)))\n\n// Internals (simplified):\nvol := 0.10\ntrigger := 1.07800\nslip := int32(10)                       // points\ncomment := \"SellStop\"\nmagic32 := int32(123456)\nexp := timestamppb.New(time.Now().Add(24*time.Hour))\n\n// 1) Optional dry-run check (the helper does it for you):\ncheckReq := &amp;pb.OrderCheckRequest{\n    MqlTradeRequest: &amp;pb.MrpcMqlTradeRequest{\n        Action:     pb.MRPC_ENUM_TRADE_REQUEST_ACTIONS_TRADE_ACTION_PENDING,\n        OrderType:  pb.ENUM_ORDER_TYPE_TF_ORDER_TYPE_TF_SELL_STOP,\n        Symbol:     \"EURUSD\",\n        Volume:     vol,\n        Price:      trigger, // absolute trigger price\n        Deviation:  10,      // points\n        TypeFilling: pb.MRPC_ENUM_ORDER_TYPE_FILLING_ORDER_FILLING_FOK,\n        TypeTime: func() pb.MRPC_ENUM_ORDER_TYPE_TIME {\n            if exp != nil { return pb.MRPC_ENUM_ORDER_TYPE_TIME_ORDER_TIME_SPECIFIED }\n            return pb.MRPC_ENUM_ORDER_TYPE_TIME_ORDER_TIME_GTC\n        }(),\n        Expiration:               exp,\n        ExpertAdvisorMagicNumber: 123456,\n        Comment:                  \"PlaceSellStop helper\",\n    },\n}\nif chk, err := svc.account.OrderCheck(ctx, checkReq); err == nil {\n    if r := chk.GetMqlTradeCheckResult(); r != nil {\n        fmt.Printf(\"\u2139\ufe0f Check SELL_STOP: code=%d comment=%q\\n\", r.GetReturnedCode(), r.GetComment())\n    }\n}\n\n// 2) Actual send:\nres, err := svc.account.OrderSend(\n    ctx,\n    \"EURUSD\",\n    pb.TMT5_ENUM_ORDER_TYPE_TMT5_ORDER_TYPE_SELL_STOP,\n    vol,\n    &amp;trigger, &amp;slip,\n    nil, nil,         // sl, tp (absolute prices) \u2014 set if needed\n    &amp;comment, &amp;magic32,\n    exp,\n)\nif err != nil {\n    log.Printf(\"\u274c OrderSend(SELL_STOP): %v\", err)\n    return\n}\n// Read result\nif ord := res.GetOrder(); ord != 0 {\n    fmt.Printf(\"\u2705 SELL_STOP placed: order=%d @ %.5f\\n\", ord, res.GetPrice())\n} else if deal := res.GetDeal(); deal != 0 {\n    fmt.Printf(\"\u2705 SELL_STOP executed immediately: deal=%d @ %.5f\\n\", deal, res.GetPrice())\n} else {\n    fmt.Printf(\"\u26a0\ufe0f SELL_STOP sent @ %.5f (no ticket in response)\\n\", res.GetPrice())\n}\n</code></pre>"},{"location":"TradingOps%28DANGEROUS%29/PlaceSellStop/#method-signature-helper","title":"Method Signature (helper)","text":"<pre><code>func (s *MT5Service) PlaceSellStop(ctx context.Context, symbol string, volume, trigger float64, sl, tp *float64, exp *timestamppb.Timestamp)\n</code></pre>"},{"location":"TradingOps%28DANGEROUS%29/PlaceSellStop/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Required Description <code>ctx</code> <code>context.Context</code> yes Timeout/cancel control. <code>symbol</code> <code>string</code> yes Symbol name. <code>volume</code> <code>float64</code> yes Lots (respect <code>VolumeMin/Max/Step</code>). <code>trigger</code> <code>float64</code> yes Absolute trigger price that arms the pending order. <code>sl</code> <code>*float64</code> no Stop Loss absolute price. <code>tp</code> <code>*float64</code> no Take Profit absolute price. <code>exp</code> <code>*google.protobuf.Timestamp</code> no Expiration time; if set, time-in-force becomes <code>*_SPECIFIED</code>."},{"location":"TradingOps%28DANGEROUS%29/PlaceSellStop/#output","title":"\u2b06\ufe0f Output","text":"<p>Returns <code>OrderSendData</code>.</p> Field Type Description <code>Order</code> <code>uint64</code> Pending order ticket (expected for a stop). <code>Deal</code> <code>uint64</code> Deal ticket if order triggered &amp; filled immediately. <code>Price</code> <code>double</code> Price acknowledged by server. <code>ReturnedCode</code> <code>uint32</code> Numeric result code. <code>ReturnedStringCode</code> <code>string</code> Short code. <code>ReturnedCodeDescription</code> <code>string</code> Human description."},{"location":"TradingOps%28DANGEROUS%29/PlaceSellStop/#enums-used","title":"Enums used","text":"<ul> <li><code>MRPC_ENUM_TRADE_REQUEST_ACTIONS</code>: <code>TRADE_ACTION_PENDING</code> (check stage).</li> <li><code>ENUM_ORDER_TYPE_TF</code>: <code>ORDER_TYPE_TF_SELL_STOP</code> (check stage).</li> <li><code>TMT5_ENUM_ORDER_TYPE</code>: <code>TMT5_ORDER_TYPE_SELL_STOP</code> (send stage).</li> <li><code>MRPC_ENUM_ORDER_TYPE_FILLING</code>: typically <code>ORDER_FILLING_FOK</code>.</li> <li><code>MRPC_ENUM_ORDER_TYPE_TIME</code>: <code>ORDER_TIME_GTC</code> or <code>ORDER_TIME_SPECIFIED</code> when <code>exp</code> is provided.</li> </ul>"},{"location":"TradingOps%28DANGEROUS%29/PlaceSellStop/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Enter short on breakdown: sell below current market when price reaches your trigger.</li> <li>Pair with SL/TP and a finite lifetime via <code>exp</code>.</li> </ul>"},{"location":"TradingOps%28DANGEROUS%29/PlaceSellStop/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Ensure <code>trigger</code> is below current market for SELL_STOP; otherwise broker may reject or convert it depending on rules.</li> <li>For a short, sanity-check: SL above, TP below the trigger.</li> <li><code>sl</code>/<code>tp</code> are absolute prices; derive from pips/ticks using <code>Digits</code> and <code>TickValueWithSize</code>.</li> <li>If you pass <code>exp</code>, mind server vs local timezone; build time via <code>timestamppb.New(...)</code>.</li> <li>The helper performs an <code>OrderCheck</code> first (prints code/comment) \u2014 use that output to troubleshoot rejects.</li> </ul>"},{"location":"TradingOps%28DANGEROUS%29/PlaceStopLimit/","title":"\ud83c\udfaf Placing a Stop\u2011Limit Pending Order (Buy/Sell)","text":"<p>Request: place a STOP\u2011LIMIT order with a trigger (stop) price and execution (limit) price. Works for both directions via <code>isBuy</code>.</p>"},{"location":"TradingOps%28DANGEROUS%29/PlaceStopLimit/#code-example","title":"Code Example","text":"<pre><code>// High-level helper (prints a human-readable result):\nsvc.PlaceStopLimit(ctx, \"EURUSD\", true /*isBuy*/, 0.10, 1.09100 /*trigger*/, 1.09120 /*limit*/, nil, nil, timestamppb.New(time.Now().Add(24*time.Hour)))\n\n// Internals (simplified):\nvol := 0.10\ntrigger := 1.09100\nlimit := 1.09120\nslip := int32(10)\ncomment := \"StopLimit\"\nmagic32 := int32(123456)\nexp := timestamppb.New(time.Now().Add(24*time.Hour))\n\n// 1) Optional dry-run check (the helper does it for you):\norderTypeTF := pb.ENUM_ORDER_TYPE_TF_ORDER_TYPE_TF_BUY_STOP_LIMIT\nif !isBuy { orderTypeTF = pb.ENUM_ORDER_TYPE_TF_ORDER_TYPE_TF_SELL_STOP_LIMIT }\ncheckReq := &amp;pb.OrderCheckRequest{\n    MqlTradeRequest: &amp;pb.MrpcMqlTradeRequest{\n        Action:     pb.MRPC_ENUM_TRADE_REQUEST_ACTIONS_TRADE_ACTION_PENDING,\n        OrderType:  orderTypeTF,\n        Symbol:     \"EURUSD\",\n        Volume:     vol,\n        Price:      trigger, // stop (trigger)\n        Deviation:  10,      // points for the limit fill\n        TypeFilling: pb.MRPC_ENUM_ORDER_TYPE_FILLING_ORDER_FILLING_FOK,\n        TypeTime: func() pb.MRPC_ENUM_ORDER_TYPE_TIME {\n            if exp != nil { return pb.MRPC_ENUM_ORDER_TYPE_TIME_ORDER_TIME_SPECIFIED }\n            return pb.MRPC_ENUM_ORDER_TYPE_TIME_ORDER_TIME_GTC\n        }(),\n        Expiration:               exp,\n        ExpertAdvisorMagicNumber: 123456,\n        Comment:                  \"PlaceStopLimit helper\",\n    },\n}\nif chk, err := svc.account.OrderCheck(ctx, checkReq); err == nil {\n    if r := chk.GetMqlTradeCheckResult(); r != nil {\n        fmt.Printf(\"\u2139\ufe0f Check STOP_LIMIT: code=%d comment=%q\\n\", r.GetReturnedCode(), r.GetComment())\n    }\n}\n\n// 2) Actual send (OrderSendEx: needs both trigger &amp; limit):\nres, err := svc.account.OrderSendEx(\n    ctx,\n    \"EURUSD\",\n    func() pb.TMT5_ENUM_ORDER_TYPE {\n        if isBuy { return pb.TMT5_ENUM_ORDER_TYPE_TMT5_ORDER_TYPE_BUY_STOP_LIMIT }\n        return pb.TMT5_ENUM_ORDER_TYPE_TMT5_ORDER_TYPE_SELL_STOP_LIMIT\n    }(),\n    vol,\n    &amp;trigger, &amp;slip,\n    nil, nil,            // sl, tp\n    &amp;comment, &amp;magic32,\n    exp,\n    &amp;limit,              // the extra limit price specific to Stop\u2011Limit\n)\nif err != nil {\n    log.Printf(\"\u274c OrderSendEx(STOP_LIMIT): %v\", err)\n    return\n}\nif ord := res.GetOrder(); ord != 0 {\n    fmt.Printf(\"\u2705 STOP_LIMIT placed: order=%d | trigger=%.5f | limit=%.5f\\n\", ord, trigger, limit)\n} else if deal := res.GetDeal(); deal != 0 {\n    fmt.Printf(\"\u2705 STOP_LIMIT executed immediately: deal=%d | price=%.5f\\n\", deal, res.GetPrice())\n} else {\n    fmt.Printf(\"\u26a0\ufe0f STOP_LIMIT sent | price=%.5f (no ticket in response)\\n\", res.GetPrice())\n}\n</code></pre>"},{"location":"TradingOps%28DANGEROUS%29/PlaceStopLimit/#method-signature-helper","title":"Method Signature (helper)","text":"<pre><code>func (s *MT5Service) PlaceStopLimit(ctx context.Context, symbol string, isBuy bool, volume, trigger, limit float64, sl, tp *float64, exp *timestamppb.Timestamp)\n</code></pre>"},{"location":"TradingOps%28DANGEROUS%29/PlaceStopLimit/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Required Description <code>ctx</code> <code>context.Context</code> yes Timeout/cancel control. <code>symbol</code> <code>string</code> yes Symbol name. <code>isBuy</code> <code>bool</code> yes Direction: <code>true</code> \u2192 Buy Stop\u2011Limit, <code>false</code> \u2192 Sell Stop\u2011Limit. <code>volume</code> <code>float64</code> yes Lots (respect <code>VolumeMin/Max/Step</code>). <code>trigger</code> <code>float64</code> yes Stop price that arms the order. <code>limit</code> <code>float64</code> yes Limit price to execute after trigger. <code>sl</code> <code>*float64</code> no Stop Loss absolute price. <code>tp</code> <code>*float64</code> no Take Profit absolute price. <code>exp</code> <code>*google.protobuf.Timestamp</code> no Expiration time; if set, time-in-force becomes <code>*_SPECIFIED</code>."},{"location":"TradingOps%28DANGEROUS%29/PlaceStopLimit/#output","title":"\u2b06\ufe0f Output","text":"<p>Returns <code>OrderSendData</code>.</p> Field Type Description <code>Order</code> <code>uint64</code> Pending order ticket (expected for Stop\u2011Limit). <code>Deal</code> <code>uint64</code> Deal ticket if order triggered &amp; filled immediately. <code>Price</code> <code>double</code> Server price (acknowledged). <code>ReturnedCode</code> <code>uint32</code> Numeric result code. <code>ReturnedStringCode</code> <code>string</code> Short code. <code>ReturnedCodeDescription</code> <code>string</code> Human description."},{"location":"TradingOps%28DANGEROUS%29/PlaceStopLimit/#enums-used","title":"Enums used","text":"<ul> <li><code>MRPC_ENUM_TRADE_REQUEST_ACTIONS</code>: <code>TRADE_ACTION_PENDING</code> (check stage).</li> <li><code>ENUM_ORDER_TYPE_TF</code>: <code>*_STOP_LIMIT</code> (check stage; depends on direction).</li> <li><code>TMT5_ENUM_ORDER_TYPE</code>: <code>*_STOP_LIMIT</code> (send stage; depends on direction).</li> <li><code>MRPC_ENUM_ORDER_TYPE_FILLING</code>: typically <code>ORDER_FILLING_FOK</code>.</li> <li><code>MRPC_ENUM_ORDER_TYPE_TIME</code>: <code>ORDER_TIME_GTC</code> or <code>ORDER_TIME_SPECIFIED</code> when <code>exp</code> is provided.</li> </ul>"},{"location":"TradingOps%28DANGEROUS%29/PlaceStopLimit/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Combine breakout logic with price control: trigger at one level, execute as a limit at another.</li> <li>Useful to avoid poor fills during fast moves.</li> </ul>"},{"location":"TradingOps%28DANGEROUS%29/PlaceStopLimit/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Direction rules: for Buy Stop\u2011Limit usually <code>limit \u2265 trigger</code>; for Sell Stop\u2011Limit usually <code>limit \u2264 trigger</code>. Brokers enforce constraints.</li> <li>If market gaps through your trigger and limit, fill may not happen \u2014 that\u2019s by design of limit. Use plain Stop if you must be filled.</li> <li>SL/TP are absolute prices; compute from pips/ticks using symbol <code>Digits</code>.</li> <li>Always inspect <code>ReturnedCode</code> &amp; server comment to troubleshoot rejects.</li> </ul>"},{"location":"TradingOps%28DANGEROUS%29/PositionClose/","title":"\ud83d\udd12 Closing an Open Position by Symbol","text":"<p>Request: find an open position by <code>symbol</code> and close it at market.</p>"},{"location":"TradingOps%28DANGEROUS%29/PositionClose/#code-example","title":"Code Example","text":"<pre><code>// High-level helper (prints a status line):\nsvc.ShowPositionClose(ctx, \"EURUSD\")\n\n// Internals (simplified):\np, err := svc.account.PositionGet(ctx, \"EURUSD\")\nif err != nil {\n    log.Printf(\"\u274c PositionGet error: %v\", err)\n    return\n}\nif p == nil || p.GetTicket() == 0 {\n    fmt.Printf(\"\u26a0\ufe0f No position found for symbol %s\\n\", \"EURUSD\")\n    return\n}\n\n// Close the whole position at market\n_, err = svc.account.PositionClose(ctx, p)\nif err != nil {\n    log.Printf(\"\u274c PositionClose error: %v\", err)\n    return\n}\nfmt.Printf(\"\u2705 Position closed: Ticket %d (%s)\\n\", p.GetTicket(), p.GetSymbol())\n</code></pre>"},{"location":"TradingOps%28DANGEROUS%29/PositionClose/#method-signature-helper","title":"Method Signature (helper)","text":"<pre><code>func (s *MT5Service) ShowPositionClose(ctx context.Context, symbol string)\n</code></pre>"},{"location":"TradingOps%28DANGEROUS%29/PositionClose/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Required Description <code>ctx</code> <code>context.Context</code> yes Timeout/cancel control. <code>symbol</code> <code>string</code> yes Symbol to look up the open position (e.g., <code>\"EURUSD\"</code>)."},{"location":"TradingOps%28DANGEROUS%29/PositionClose/#output","title":"\u2b06\ufe0f Output","text":"<p>The helper prints one of the following messages:</p> <ul> <li><code>\u2705 Position closed: Ticket &lt;id&gt; (&lt;symbol&gt;)</code></li> <li><code>\u26a0\ufe0f No position found for symbol &lt;symbol&gt;</code></li> <li><code>\u274c PositionGet/PositionClose error: &lt;err&gt;</code></li> </ul> <p>Under the hood, <code>PositionClose</code> returns an implementation-specific result; success is signaled by <code>err == nil</code>.</p>"},{"location":"TradingOps%28DANGEROUS%29/PositionClose/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Programmatically exit an entire open position for a given symbol at market.</li> <li>Handy for panic\u2011close buttons, risk rules, or end\u2011of\u2011session cleanup.</li> </ul>"},{"location":"TradingOps%28DANGEROUS%29/PositionClose/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li> <p>This helper closes full volume for the symbol\u2019s current position.</p> </li> <li> <p>For partial close, use <code>OrderClose(ticket, price, &amp;volume)</code> (see <code>ShowOrderCloseExample</code>) or broker\u2011specific reduce flows.</p> </li> <li> <p>Netting vs Hedging:</p> </li> <li> <p>In netting mode you have at most one position per symbol \u2192 this helper fits perfectly.</p> </li> <li>In hedging mode there can be multiple tickets per symbol; this helper closes the one returned by <code>PositionGet</code> (typically the aggregate or most recent depending on API semantics). If you need per\u2011ticket control, prefer <code>OrderClose</code> by <code>ticket</code>.</li> <li>Trading hours &amp; permissions: close can be rejected outside session or when symbol is in <code>CLOSE_ONLY</code> mode.</li> <li>Combine with <code>ShowHasOpenPosition</code> to avoid attempting a close when nothing is open.</li> </ul>"},{"location":"TradingOps%28DANGEROUS%29/PositionModify/","title":"\ud83d\udee0\ufe0f Modifying an Open Position (SL/TP)","text":"<p>Request: update Stop Loss and/or Take Profit for an existing open position by its <code>ticket</code>.</p>"},{"location":"TradingOps%28DANGEROUS%29/PositionModify/#code-example","title":"Code Example","text":"<pre><code>// High-level helper (prints result):\nsl := 1.07500\ntp := 1.08500\nsvc.ShowPositionModify(ctx, 987654321 /*position ticket*/, &amp;sl, &amp;tp)\n\n// Internals (simplified):\nok, err := svc.account.PositionModify(ctx, 987654321, &amp;sl, &amp;tp)\nif err != nil {\n    log.Printf(\"\u274c PositionModify error: %v\", err)\n    return\n}\nif ok {\n    fmt.Printf(\"\u2705 Position %d modified (SL/TP updated)\\n\", 987654321)\n} else {\n    fmt.Printf(\"\u26a0\ufe0f Position %d was NOT modified\\n\", 987654321)\n}\n</code></pre>"},{"location":"TradingOps%28DANGEROUS%29/PositionModify/#method-signature-helper","title":"Method Signature (helper)","text":"<pre><code>func (s *MT5Service) ShowPositionModify(ctx context.Context, ticket uint64, newSL, newTP *float64)\n</code></pre>"},{"location":"TradingOps%28DANGEROUS%29/PositionModify/#input","title":"\ud83d\udd3d Input","text":"Parameter Type Required Description <code>ctx</code> <code>context.Context</code> yes Timeout/cancel control. <code>ticket</code> <code>uint64</code> yes Position ticket to modify. <code>newSL</code> <code>*float64</code> no New Stop Loss (absolute price). <code>nil</code> \u2192 do not change. <code>newTP</code> <code>*float64</code> no New Take Profit (absolute price). <code>nil</code> \u2192 do not change. <p>Both <code>newSL</code> and <code>newTP</code> are absolute prices, not offsets.</p>"},{"location":"TradingOps%28DANGEROUS%29/PositionModify/#output","title":"\u2b06\ufe0f Output","text":"<p>The helper prints a message. Underlying call returns:</p> Field Type Description <code>ok</code> <code>bool</code> <code>true</code> if the server applied the change. <code>err</code> <code>error</code> Error if the request failed."},{"location":"TradingOps%28DANGEROUS%29/PositionModify/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Move protective levels after entry (e.g., trail SL, set TP once structure forms).</li> <li>Enforce risk rules programmatically.</li> </ul>"},{"location":"TradingOps%28DANGEROUS%29/PositionModify/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Validate distances: brokers enforce min stops / freeze levels \u2014 too tight SL/TP will be rejected.</li> <li> <p>Direction sanity:</p> </li> <li> <p>Long: <code>SL &lt; market</code>, <code>TP &gt; market</code>.</p> </li> <li>Short: <code>SL &gt; market</code>, <code>TP &lt; market</code>.</li> <li>If you only need to change one level, pass the other as <code>nil</code>.</li> <li>To modify a pending order\u2019s price/expiration, use <code>OrderModify</code> instead \u2014 this method is only for open positions.</li> <li>Combine with <code>SymbolParams</code> (<code>Digits</code>, min distances) and <code>Quote</code> to compute valid absolute prices. \ud83d\udccf</li> </ul>"},{"location":"TradingOps%28DANGEROUS%29/SellMarket/","title":"Sending a Market Order (Sell Example)","text":"<p>Request: demonstrate how to place a Sell Market order and parse the result.</p>"},{"location":"TradingOps%28DANGEROUS%29/SellMarket/#code-example","title":"Code Example","text":"<pre><code>// High-level helper:\nsvc.SellMarket(ctx, \"EURUSD\", 0.10, nil, nil)\n\n// Internally:\nvolume := 0.10\nslippage := int32(20)         // allowed slippage in points\ncomment := \"Sell market order\"\nmagic := int32(12345)\n\nres, err := svc.account.OrderSend(\n    ctx,\n    pb.MRPC_ENUM_TRADE_REQUEST_ACTIONS_TRADE_ACTION_DEAL, // direct market deal\n    pb.ENUM_ORDER_TYPE_TF_ORDER_TYPE_TF_SELL,             // Sell\n    \"EURUSD\",\n    volume,\n    0,              // price=0 means \"market\" on most servers\n    &amp;slippage,\n    nil,            // StopLoss (absolute price)\n    nil,            // TakeProfit (absolute price)\n    &amp;comment,\n    &amp;magic,\n    nil,            // expiration not used for market orders\n)\nif err != nil {\n    log.Printf(\"\u274c SellMarket error: %v\", err)\n    return\n}\n\n// Read result\ndeal := res.GetDeal()\nprice := res.GetPrice()\ncode  := res.GetReturnedCode()\nif deal != 0 {\n    fmt.Printf(\"\u2705 Sell executed! Deal:%d Volume:%.2f Price:%.5f Code:%d\\n\", deal, volume, price, code)\n} else {\n    fmt.Printf(\"\u26a0\ufe0f No deal ticket returned | Price: %.5f | Code: %d\\n\", price, code)\n}\n</code></pre>"},{"location":"TradingOps%28DANGEROUS%29/SellMarket/#method-signature-helper","title":"Method Signature (helper)","text":"<pre><code>func (s *MT5Service) SellMarket(ctx context.Context, symbol string, volume float64, sl *float64, tp *float64)\n</code></pre>"},{"location":"TradingOps%28DANGEROUS%29/SellMarket/#input","title":"\ud83d\udd3d Input","text":"<p>Helper accepts <code>ctx</code>, <code>symbol</code>, <code>volume</code>, optional <code>sl</code>, and <code>tp</code>. The underlying <code>OrderSend</code> call has full parameter set:</p> Parameter Type Required Description <code>ctx</code> <code>context.Context</code> yes Timeout/cancel control. <code>action</code> <code>MRPC_ENUM_TRADE_REQUEST_ACTIONS</code> yes <code>TRADE_ACTION_DEAL</code> for market trades. <code>orderType</code> <code>ENUM_ORDER_TYPE_TF</code> yes <code>ORDER_TYPE_TF_SELL</code> for Sell. <code>symbol</code> <code>string</code> yes Symbol name. <code>volume</code> <code>float64</code> yes Lots to sell. <code>price</code> <code>float64</code> no <code>0</code> \u2192 market execution. <code>slippage</code> <code>*int32</code> no Max slippage (points). <code>sl</code> <code>*float64</code> no Stop Loss absolute price. <code>tp</code> <code>*float64</code> no Take Profit absolute price. <code>comment</code> <code>*string</code> no Order comment. <code>magic</code> <code>*int32</code> no EA magic number. <code>expiration</code> <code>*google.protobuf.Timestamp</code> no Not used for market orders."},{"location":"TradingOps%28DANGEROUS%29/SellMarket/#output","title":"\u2b06\ufe0f Output","text":"<p>Returns <code>OrderSendData</code> with main fields:</p> Field Type Description <code>Deal</code> <code>uint64</code> Deal ticket if trade executed. <code>Order</code> <code>uint64</code> Order ticket (rarely used in market deals). <code>Price</code> <code>double</code> Execution price. <code>Volume</code> <code>double</code> Executed volume. <code>ReturnedCode</code> <code>uint32</code> Numeric result code. <code>ReturnedStringCode</code> <code>string</code> Short code. <code>ReturnedCodeDescription</code> <code>string</code> Human description."},{"location":"TradingOps%28DANGEROUS%29/SellMarket/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Execute a direct Sell market order.</li> <li>Straightforward way to enter short exposure at current market price.</li> <li>Common for testing connectivity, permissions, and latency.</li> </ul>"},{"location":"TradingOps%28DANGEROUS%29/SellMarket/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Use <code>sl</code>/<code>tp</code> to attach protective orders; they must be absolute prices.</li> <li>Ensure your SL price is above market for sells, TP is below (basic sanity check to avoid broker rejects).</li> <li>Slippage is in points; align with your broker\u2019s pricing (e.g., 1 pip = 10 points on 5-digit FX).</li> <li>Always validate <code>ReturnedCode</code>/logs for possible rejections (off quotes, trade disabled, etc.).</li> </ul>"},{"location":"TradingOps%28DANGEROUS%29/SetOrderExpiration/","title":"\u23f3 Expiration (timestamppb) \u2014 How To Use","text":"<p>Purpose: set expiration time for pending orders in MT5 (Buy Limit, Sell Limit, Buy Stop, etc.) \ud83d\udd52</p>"},{"location":"TradingOps%28DANGEROUS%29/SetOrderExpiration/#code-example","title":"Code Example \u26a1","text":"<pre><code>// expire in 24h\nexp := timestamppb.New(time.Now().Add(24 * time.Hour))\n\n// use in pending order placement\nsvc.PlaceBuyLimit(ctx, \"EURUSD\", 0.10, 1.07500, nil, nil, exp)\n</code></pre>"},{"location":"TradingOps%28DANGEROUS%29/SetOrderExpiration/#step-by-step","title":"Step by Step \ud83d\udcdd","text":"<ol> <li><code>time.Now()</code> \u2192 current system time \u231a</li> <li><code>.Add(24 * time.Hour)</code> \u2192 add 24 hours \u23f0</li> <li><code>timestamppb.New(...)</code> \u2192 convert Go <code>time.Time</code> \u2192 Protobuf <code>Timestamp</code> \ud83d\udce6</li> <li>Pass <code>exp</code> to order methods \u2192 broker knows when to auto-cancel order \u274c</li> </ol>"},{"location":"TradingOps%28DANGEROUS%29/SetOrderExpiration/#variations","title":"Variations \ud83c\udf9b\ufe0f","text":"<ul> <li>Expire in N minutes:</li> </ul> <p><pre><code>exp := timestamppb.New(time.Now().Add(30 * time.Minute))\n</code></pre> * Expire end of day:</p> <p><pre><code>end := time.Date(y, m, d, 23, 59, 59, 0, time.Local)\nexp := timestamppb.New(end)\n</code></pre> * Expire in N days:</p> <pre><code>exp := timestamppb.New(time.Now().AddDate(0,0,3)) // +3 days\n</code></pre>"},{"location":"TradingOps%28DANGEROUS%29/SetOrderExpiration/#usage-scenarios","title":"Usage Scenarios \ud83c\udfaf","text":"<ul> <li><code>OrderCheck</code> \ud83e\uddea \u2192 dry-run with expiration.</li> <li><code>OrderSend</code> \ud83d\ude80 \u2192 send pending order with lifetime.</li> <li><code>OrderModify</code> \ud83d\udd27 \u2192 update existing order to set/change expiration.</li> </ul>"},{"location":"TradingOps%28DANGEROUS%29/SetOrderExpiration/#enum-order_time","title":"ENUM: ORDER_TIME \u2328\ufe0f","text":"Value Meaning <code>ORDER_TIME_GTC</code> Good-Till-Cancelled \u267e\ufe0f <code>ORDER_TIME_DAY</code> Valid only for the day \ud83d\udcc5 <code>ORDER_TIME_SPECIFIED</code> Expire at exact time \u23f3 <code>ORDER_TIME_SPECIFIED_DAY</code> Expire at end of day \ud83c\udfc1 <p>When you pass <code>exp</code>, API sets <code>ORDER_TIME_SPECIFIED</code>. \u2705</p>"},{"location":"TradingOps%28DANGEROUS%29/SetOrderExpiration/#common-pitfalls","title":"Common Pitfalls \u26a0\ufe0f","text":"<ul> <li>Don\u2019t forget: market orders ignore expiration \u274c</li> <li>Server clock \u2260 local clock \ud83d\udda5\ufe0f vs. \ud83c\udfe6</li> <li>Timezone: MT servers usually run EET (UTC+2/3) \ud83c\udf0d</li> </ul>"},{"location":"TradingOps%28DANGEROUS%29/SetOrderExpiration/#example-with-full-context","title":"Example with full context \ud83d\udcda","text":"<pre><code>exp := timestamppb.New(time.Now().Add(24 * time.Hour))\n\nres, err := svc.account.OrderSend(\n    ctx,\n    pb.MRPC_ENUM_TRADE_REQUEST_ACTIONS_TRADE_ACTION_PENDING,\n    pb.ENUM_ORDER_TYPE_TF_ORDER_TYPE_TF_BUY_LIMIT,\n    \"EURUSD\",\n    0.10,\n    1.07500,\n    nil, nil, nil, nil, nil,\n    exp,\n)\n</code></pre> <p>\u2705 In short: <code>timestamppb.New(...)</code> is your helper to say \u201cthis order lives until X\u201d. Very handy for pending orders \ud83c\udfaf</p>"},{"location":"TradingOps%28DANGEROUS%29/ShowOrderSendExample/","title":"Sending a Simple Market/Pending Order (Example)","text":"<p>Request: demonstrate a basic <code>OrderSend</code> call and how to read its result.</p>"},{"location":"TradingOps%28DANGEROUS%29/ShowOrderSendExample/#code-example","title":"Code Example","text":"<pre><code>// High-level helper (prints a human-readable result):\nsvc.ShowOrderSendExample(ctx, \"EURUSD\")\n\n// What it does internally (simplified):\nvolume := 0.10\nslippage := int32(5)                 // points\ncomment := \"Go order test\"\nmagic := int32(123456)\n\nres, err := svc.account.OrderSend(\n    ctx,\n    \"EURUSD\",                                        // symbol\n    pb.TMT5_ENUM_ORDER_TYPE_TMT5_ORDER_TYPE_BUY,      // market BUY\n    volume,                                           // lots\n    nil,                                              // price: nil for market (server uses current)\n    &amp;slippage,                                        // max slippage (points)\n    nil,                                              // SL (absolute price) or nil\n    nil,                                              // TP (absolute price) or nil\n    &amp;comment,                                         // comment\n    &amp;magic,                                           // EA magic number\n    nil,                                              // expiration (for pending with specified time)\n)\nif err != nil {\n    log.Printf(\"\u274c OrderSend error: %v\", err)\n    return\n}\n\n// Read result (order placed or deal executed):\norder := res.GetOrder() // pending order ticket (if placed as pending)\ndeal  := res.GetDeal()  // deal ticket (if executed immediately)\nprice := res.GetPrice()\nvol   := res.GetVolume()\ncode  := res.GetReturnedCode()\nif deal != 0 {\n    fmt.Printf(\"\u2705 Market executed! Deal:%d Price:%.5f Volume:%.2f Code:%d\\n\", deal, price, vol, code)\n} else if order != 0 {\n    fmt.Printf(\"\u2705 Pending placed! Order:%d Price:%.5f Volume:%.2f Code:%d\\n\", order, price, vol, code)\n} else {\n    fmt.Printf(\"\u26a0\ufe0f No ticket returned | Price: %.5f | Volume: %.2f | Code: %d\\n\", price, vol, code)\n}\n</code></pre>"},{"location":"TradingOps%28DANGEROUS%29/ShowOrderSendExample/#method-signature-helper","title":"Method Signature (helper)","text":"<pre><code>func (s *MT5Service) ShowOrderSendExample(ctx context.Context, symbol string)\n</code></pre>"},{"location":"TradingOps%28DANGEROUS%29/ShowOrderSendExample/#input","title":"\ud83d\udd3d Input","text":"<p>High-level helper takes only <code>ctx</code> and <code>symbol</code>. The underlying RPC accepts the full set below:</p>"},{"location":"TradingOps%28DANGEROUS%29/ShowOrderSendExample/#underlying-ordersend-parameters","title":"Underlying <code>OrderSend</code> parameters","text":"Parameter Type Required Description <code>ctx</code> <code>context.Context</code> yes Timeout/cancel control. <code>symbol</code> <code>string</code> yes Symbol name. <code>orderType</code> <code>pb.TMT5_ENUM_ORDER_TYPE</code> yes Concrete TMT5 order type (see enum). <code>volume</code> <code>float64</code> yes Lots (respect <code>VolumeMin/Max/Step</code>). <code>price</code> <code>*float64</code> no <code>nil</code> for market; set absolute price for pendings. <code>slippage</code> <code>*int32</code> no Max slippage (points). <code>sl</code> <code>*float64</code> no Stop Loss absolute price or <code>nil</code>. <code>tp</code> <code>*float64</code> no Take Profit absolute price or <code>nil</code>. <code>comment</code> <code>*string</code> no User/EA comment. <code>magic</code> <code>*int32</code> no EA magic number. <code>expiration</code> <code>*google.protobuf.Timestamp</code> no Expiry time for time\u2011specified pendings."},{"location":"TradingOps%28DANGEROUS%29/ShowOrderSendExample/#output","title":"\u2b06\ufe0f Output","text":"<p>RPC returns <code>OrderSendData</code>. Typical fields used:</p> Field Type Description <code>Order</code> <code>uint64</code> Pending order ticket (if a pending was placed). <code>Deal</code> <code>uint64</code> Deal ticket (if executed immediately). <code>Price</code> <code>double</code> Execution/placement price returned by server. <code>Volume</code> <code>double</code> Executed/placed volume. <code>ReturnedCode</code> <code>uint32</code> Numeric result code. <code>ReturnedStringCode</code> <code>string</code> Short string representation of the code. <code>ReturnedCodeDescription</code> <code>string</code> Human\u2011readable description of the code."},{"location":"TradingOps%28DANGEROUS%29/ShowOrderSendExample/#enum-tmt5_enum_order_type","title":"Enum: <code>TMT5_ENUM_ORDER_TYPE</code>","text":"Code Name Meaning 0 <code>TMT5_ORDER_TYPE_BUY</code> Market Buy 1 <code>TMT5_ORDER_TYPE_SELL</code> Market Sell 2 <code>TMT5_ORDER_TYPE_BUY_LIMIT</code> Pending Buy Limit 3 <code>TMT5_ORDER_TYPE_SELL_LIMIT</code> Pending Sell Limit 4 <code>TMT5_ORDER_TYPE_BUY_STOP</code> Pending Buy Stop 5 <code>TMT5_ORDER_TYPE_SELL_STOP</code> Pending Sell Stop 6 <code>TMT5_ORDER_TYPE_BUY_STOP_LIMIT</code> Pending Buy Stop\u2011Limit 7 <code>TMT5_ORDER_TYPE_SELL_STOP_LIMIT</code> Pending Sell Stop\u2011Limit <p>These are the concrete order types expected by <code>OrderSend</code>. For time\u2011in\u2011force and filling policy, see <code>OrderCheck</code> card.</p>"},{"location":"TradingOps%28DANGEROUS%29/ShowOrderSendExample/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Minimal example of placing a market/pending order from Go.</li> <li>Demonstrates reading both Deal and Order workflow outcomes.</li> <li>A solid template to copy and adjust (symbol, volume, SL/TP, etc.).</li> </ul>"},{"location":"TradingOps%28DANGEROUS%29/ShowOrderSendExample/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>For market orders pass <code>price=nil</code>; for pending pass your absolute entry price.</li> <li>SL/TP are absolute prices, not offsets \u2014 derive from pips/ticks using <code>Digits</code>.</li> <li><code>slippage</code> is in points; make sure you map your UI \u201cpips\u201d correctly (5\u2011digit FX: 1 pip = 10 points).</li> <li>Always check <code>ReturnedCode</code>/<code>ReturnedStringCode</code> for diagnostics even if you got a ticket.</li> </ul>"},{"location":"TradingOps%28DANGEROUS%29/ShowOrderSendStopLimitExample/","title":"Placing a STOP\u2011LIMIT Order (Example)","text":"<p>Request: place a Stop\u2011Limit pending order (buy or sell) with trigger and limit prices.</p>"},{"location":"TradingOps%28DANGEROUS%29/ShowOrderSendStopLimitExample/#code-example","title":"Code Example","text":"<pre><code>// High-level helper (prints a human\u2011readable result):\nsvc.ShowOrderSendStopLimitExample(ctx, \"EURUSD\", true /*isBuy*/, 1.09100 /*trigger*/, 1.09120 /*limit*/)\n\n// What it does internally (simplified):\nvolume := 0.10\nslippage := int32(10)         // points\ncomment := \"SLimit from service\"\nmagic := int32(98765)\nexp := timestamppb.New(time.Now().Add(24 * time.Hour))\n\nres, err := svc.account.OrderSendStopLimit(\n    ctx,\n    \"EURUSD\", // symbol\n    true,      // isBuy (true=BUY_STOP_LIMIT, false=SELL_STOP_LIMIT)\n    volume,\n    1.09100,   // trigger price (stop)\n    1.09120,   // limit price\n    &amp;slippage, // max slippage (points) for the *limit* execution\n    nil,       // sl (absolute price) or nil\n    nil,       // tp (absolute price) or nil\n    &amp;comment,  // user/EA comment\n    &amp;magic,    // EA magic number\n    exp,       // expiration (optional; required if using time-specified policies)\n)\nif err != nil {\n    log.Printf(\"\u274c OrderSendStopLimit error: %v\", err)\n    return\n}\n\nif ord := res.GetOrder(); ord != 0 {\n    fmt.Printf(\"\u2705 STOP_LIMIT placed. Order:%d Trigger:%.5f Limit:%.5f Code:%d\\n\",\n        ord, 1.09100, 1.09120, res.GetReturnedCode())\n    return\n}\nif deal := res.GetDeal(); deal != 0 {\n    fmt.Printf(\"\u2705 STOP_LIMIT executed immediately. Deal:%d Price:%.5f Code:%d\\n\",\n        deal, res.GetPrice(), res.GetReturnedCode())\n    return\n}\nfmt.Printf(\"\u26a0\ufe0f STOP_LIMIT response without ticket | Price: %.5f | Code: %d\\n\",\n    res.GetPrice(), res.GetReturnedCode())\n</code></pre>"},{"location":"TradingOps%28DANGEROUS%29/ShowOrderSendStopLimitExample/#method-signature-helper","title":"Method Signature (helper)","text":"<pre><code>func (s *MT5Service) ShowOrderSendStopLimitExample(ctx context.Context, symbol string, isBuy bool, trigger, limit float64)\n</code></pre>"},{"location":"TradingOps%28DANGEROUS%29/ShowOrderSendStopLimitExample/#input","title":"\ud83d\udd3d Input","text":"<p>High-level helper takes <code>symbol</code>, <code>isBuy</code>, <code>trigger</code>, <code>limit</code>; the underlying RPC accepts the full set below.</p>"},{"location":"TradingOps%28DANGEROUS%29/ShowOrderSendStopLimitExample/#underlying-ordersendstoplimit-parameters","title":"Underlying <code>OrderSendStopLimit</code> parameters","text":"Parameter Type Required Description <code>ctx</code> <code>context.Context</code> yes Timeout/cancel control. <code>symbol</code> <code>string</code> yes Symbol name. <code>isBuy</code> <code>bool</code> yes <code>true</code> \u2192 BUY_STOP_LIMIT, <code>false</code> \u2192 SELL_STOP_LIMIT. <code>volume</code> <code>float64</code> yes Lots (respect <code>VolumeMin/Max/Step</code>). <code>trigger</code> <code>float64</code> yes Stop price that arms the order. <code>limit</code> <code>float64</code> yes Limit price to execute after trigger. <code>slippage</code> <code>*int32</code> no Max slippage (points) for the limit execution. <code>sl</code> <code>*float64</code> no Stop Loss absolute price or <code>nil</code>. <code>tp</code> <code>*float64</code> no Take Profit absolute price or <code>nil</code>. <code>comment</code> <code>*string</code> no User/EA comment. <code>magic</code> <code>*int32</code> no EA magic number. <code>expiration</code> <code>*google.protobuf.Timestamp</code> no Expiration; set if you need time\u2011limited pending."},{"location":"TradingOps%28DANGEROUS%29/ShowOrderSendStopLimitExample/#output","title":"\u2b06\ufe0f Output","text":"<p>RPC returns <code>OrderSendData</code> (same container as <code>OrderSend</code>). Key fields:</p> Field Type Description <code>Order</code> <code>uint64</code> Pending order ticket (if placed). <code>Deal</code> <code>uint64</code> Deal ticket (if triggered and executed immediately). <code>Price</code> <code>double</code> Server price value from processing. <code>ReturnedCode</code> <code>uint32</code> Numeric result code. <code>ReturnedStringCode</code> <code>string</code> Short string code. <code>ReturnedCodeDescription</code> <code>string</code> Human\u2011readable description."},{"location":"TradingOps%28DANGEROUS%29/ShowOrderSendStopLimitExample/#direction-types","title":"Direction &amp; Types","text":"<p>Although the helper uses a boolean, internally this maps to TF order types:</p> <ul> <li><code>isBuy=true</code>  \u2192 <code>BUY_STOP_LIMIT</code></li> <li><code>isBuy=false</code> \u2192 <code>SELL_STOP_LIMIT</code></li> </ul> <p>These correspond to the usual <code>ENUM_ORDER_TYPE_TF</code> values used in checks and to <code>TMT5_ENUM_ORDER_TYPE</code> used in low\u2011level send calls.</p>"},{"location":"TradingOps%28DANGEROUS%29/ShowOrderSendStopLimitExample/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Place a pending order that triggers at one price and must execute at (or better than) a second price.</li> <li>Useful for breakouts with controlled entry price.</li> </ul>"},{"location":"TradingOps%28DANGEROUS%29/ShowOrderSendStopLimitExample/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Trigger vs Limit: the order arms at <code>trigger</code>, then submits a limit at <code>limit</code>. For BUY_STOP_LIMIT, typically <code>limit \u2265 trigger</code>; for SELL_STOP_LIMIT, typically <code>limit \u2264 trigger</code>. Brokers can reject invalid relations.</li> <li>Immediate execution: In fast markets, the trigger may fire instantly and your limit may fill immediately \u2014 that\u2019s the \u201cDeal\u201d branch above.</li> <li>SL/TP are absolute prices (not offsets). Compute from pips/ticks using <code>Digits</code>.</li> <li>Slippage is in points. Map carefully if your UI works in pips (5\u2011digit FX: 1 pip = 10 points).</li> <li>Set <code>expiration</code> when you want the pending to auto\u2011cancel after some time; otherwise time\u2011in\u2011force defaults apply per broker.</li> </ul>"},{"location":"TradingOps%28DANGEROUS%29/TradingOperations_Overview/","title":"Trading Operations \u2014 Overview (\u26a0\ufe0f Dangerous)","text":"<p>This section contains critical trading operations that directly modify account positions, open or close orders, and place new trades. These methods are powerful but must be used with extreme caution to avoid unintended losses.</p>"},{"location":"TradingOps%28DANGEROUS%29/TradingOperations_Overview/#methods-in-this-section","title":"\ud83d\udcc2 Methods in this Section","text":"<ul> <li> <p>BuyMarket.md   Execute an immediate buy order at current market price.</p> </li> <li> <p>SellMarket.md   Execute an immediate sell order at current market price.</p> </li> <li> <p>PlaceBuyLimit.md   Place a buy limit order below current market price.</p> </li> <li> <p>PlaceSellLimit.md   Place a sell limit order above current market price.</p> </li> <li> <p>PlaceBuyStop.md   Place a buy stop order above current market price.</p> </li> <li> <p>PlaceSellStop.md   Place a sell stop order below current market price.</p> </li> <li> <p>PlaceStopLimit.md   Place a stop-limit order, combining stop and limit conditions.</p> </li> <li> <p>PositionClose.md   Close an open position by ticket or symbol.</p> </li> <li> <p>PositionModify.md   Modify parameters of an existing position (e.g., SL/TP).</p> </li> <li> <p>CloseAllPositions.md   Force-close all open positions in the account.</p> </li> <li> <p>OrderCloseExample.md   Example: how to close a single order safely.</p> </li> <li> <p>OrderDeleteExample.md   Example: how to delete a pending order.</p> </li> <li> <p>OrderModifyExample.md   Example: how to modify an order\u2019s price or expiration.</p> </li> <li> <p>ShowOrderSendExample.md   Example of sending a new market/pending order.</p> </li> <li> <p>ShowOrderSendStopLimitExample.md   Example of sending a stop-limit order.</p> </li> <li> <p>SetOrderExpiration.md   Define an expiration time for pending orders.</p> </li> </ul>"},{"location":"TradingOps%28DANGEROUS%29/TradingOperations_Overview/#important-notes","title":"\u26a0\ufe0f Important Notes","text":"<ol> <li>Always test on demo before using in live trading.</li> <li>Double-check order parameters (symbol, volume, SL/TP, expiration) before sending.</li> <li>Use OrderCheck for validation.</li> <li>Handle errors properly \u2014 server rejections may occur due to margin, invalid price, or market state.</li> <li>Be especially careful with CloseAllPositions, as it forcefully exits all trades.</li> </ol>"},{"location":"TradingOps%28DANGEROUS%29/TradingOperations_Overview/#best-practices","title":"\u2705 Best Practices","text":"<ul> <li>Use calculation functions (<code>OrderCalcMargin</code>, <code>OrderCalcProfit</code>) before placing trades.</li> <li>Implement logging for every order send/modify/delete.</li> <li>When modifying orders, always re-validate new parameters.</li> <li>Apply rate-limiting \u2014 avoid sending too many trade requests per second.</li> </ul>"},{"location":"TradingOps%28DANGEROUS%29/TradingOperations_Overview/#purpose","title":"\ud83c\udfaf Purpose","text":"<p>This block is the core execution engine of your trading system. It allows you to:</p> <ul> <li>Enter the market (market orders).</li> <li>Place conditional entries (limit, stop, stop-limit).</li> <li>Manage and modify existing positions.</li> <li>Exit positions safely (individual or all-at-once).</li> </ul> <p>\ud83d\udc49 Treat these methods as live ammunition: extremely useful but risky if mishandled.</p>"}]}